/*
 * Copyright 2022 Micro Focus or one of its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//
// This file is auto-generated by SchemaGenerator
//
package io.github.fileanalysissuite.adaptersdk.schema;

import io.github.fileanalysissuite.adaptersdk.schema.builders.JsonBuilder;
import io.github.fileanalysissuite.adaptersdk.schema.builders.SchemaObjectBuilder;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public final class TestSchemaObjectBuilder {
  private final SchemaObjectBuilder schemaObjectBuilder;

  public TestSchemaObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
    this.schemaObjectBuilder = schemaObjectBuilder;
  }

  public void setAccounts(final Consumer<AccountsObjectBuilder> director) {
    final AccountsObjectBuilder accountsBuilder = new AccountsObjectBuilder();
    director.accept(accountsBuilder);
    schemaObjectBuilder.setJsonFieldValue(
      TestSchema.ACCOUNTS,
      jsonBuilder -> {
        accountsBuilder.build(jsonBuilder);
    }
    );
  }

  public void setAccounts(final Stream<Consumer<AccountsObjectBuilder>> directors) {
    schemaObjectBuilder.setJsonFieldValue(
      TestSchema.ACCOUNTS,
      directors.<Consumer<JsonBuilder>>map(director -> {
        final AccountsObjectBuilder accountsBuilder = new AccountsObjectBuilder();
        director.accept(accountsBuilder);
        return jsonBuilder -> {
          accountsBuilder.build(jsonBuilder);
        };
    }));
  }

  public void setAccounts(final List<Consumer<AccountsObjectBuilder>> directors) {
    setAccounts(directors.stream());
  }

  public void clearAccounts() {
    schemaObjectBuilder.clearField(TestSchema.ACCOUNTS);
  }

  public void setAddressBcc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_BCC, values);
  }

  public void setAddressBcc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_BCC, values);
  }

  public void addAddressBcc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ADDRESS_BCC, value);
  }

  public void setAddressBcc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_BCC, value);
  }

  public void clearAddressBcc() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_BCC);
  }

  public void setAddressCc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_CC, values);
  }

  public void setAddressCc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_CC, values);
  }

  public void addAddressCc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ADDRESS_CC, value);
  }

  public void setAddressCc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_CC, value);
  }

  public void clearAddressCc() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_CC);
  }

  public void setAddressDisplayBcc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_BCC, values);
  }

  public void setAddressDisplayBcc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_BCC, values);
  }

  public void addAddressDisplayBcc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ADDRESS_DISPLAY_BCC, value);
  }

  public void setAddressDisplayBcc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_BCC, value);
  }

  public void clearAddressDisplayBcc() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_DISPLAY_BCC);
  }

  public void setAddressDisplayCc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_CC, values);
  }

  public void setAddressDisplayCc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_CC, values);
  }

  public void addAddressDisplayCc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ADDRESS_DISPLAY_CC, value);
  }

  public void setAddressDisplayCc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_CC, value);
  }

  public void clearAddressDisplayCc() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_DISPLAY_CC);
  }

  public void setAddressDisplayFrom(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_FROM, value);
  }

  public void clearAddressDisplayFrom() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_DISPLAY_FROM);
  }

  public void setAddressDisplayTo(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_TO, values);
  }

  public void setAddressDisplayTo(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_TO, values);
  }

  public void addAddressDisplayTo(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ADDRESS_DISPLAY_TO, value);
  }

  public void setAddressDisplayTo(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_DISPLAY_TO, value);
  }

  public void clearAddressDisplayTo() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_DISPLAY_TO);
  }

  public void setAddressFrom(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_FROM, value);
  }

  public void clearAddressFrom() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_FROM);
  }

  public void setAddressTo(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_TO, values);
  }

  public void setAddressTo(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_TO, values);
  }

  public void addAddressTo(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ADDRESS_TO, value);
  }

  public void setAddressTo(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ADDRESS_TO, value);
  }

  public void clearAddressTo() {
    schemaObjectBuilder.clearField(TestSchema.ADDRESS_TO);
  }

  public void setCc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.CC, value);
  }

  public void clearCc() {
    schemaObjectBuilder.clearField(TestSchema.CC);
  }

  public void setColumns(final Consumer<ColumnsObjectBuilder> director) {
    final ColumnsObjectBuilder columnsBuilder = new ColumnsObjectBuilder();
    director.accept(columnsBuilder);
    schemaObjectBuilder.setJsonFieldValue(
      TestSchema.COLUMNS,
      jsonBuilder -> {
        columnsBuilder.build(jsonBuilder);
    }
    );
  }

  public void setColumns(final Stream<Consumer<ColumnsObjectBuilder>> directors) {
    schemaObjectBuilder.setJsonFieldValue(
      TestSchema.COLUMNS,
      directors.<Consumer<JsonBuilder>>map(director -> {
        final ColumnsObjectBuilder columnsBuilder = new ColumnsObjectBuilder();
        director.accept(columnsBuilder);
        return jsonBuilder -> {
          columnsBuilder.build(jsonBuilder);
        };
    }));
  }

  public void setColumns(final List<Consumer<ColumnsObjectBuilder>> directors) {
    setColumns(directors.stream());
  }

  public void clearColumns() {
    schemaObjectBuilder.clearField(TestSchema.COLUMNS);
  }

  public void setColumnCount(final Integer value) {
    schemaObjectBuilder.setIntegerFieldValue(TestSchema.COLUMN_COUNT, value);
  }

  public void clearColumnCount() {
    schemaObjectBuilder.clearField(TestSchema.COLUMN_COUNT);
  }

  public void setContentPrimary(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.CONTENT_PRIMARY, value);
  }

  public void clearContentPrimary() {
    schemaObjectBuilder.clearField(TestSchema.CONTENT_PRIMARY);
  }

  public void setDateArchived(final Instant value) {
    schemaObjectBuilder.setInstantFieldValue(TestSchema.DATE_ARCHIVED, value);
  }

  public void clearDateArchived() {
    schemaObjectBuilder.clearField(TestSchema.DATE_ARCHIVED);
  }

  public void setDateCreated(final Instant value) {
    schemaObjectBuilder.setInstantFieldValue(TestSchema.DATE_CREATED, value);
  }

  public void clearDateCreated() {
    schemaObjectBuilder.clearField(TestSchema.DATE_CREATED);
  }

  public void setDateModified(final Instant value) {
    schemaObjectBuilder.setInstantFieldValue(TestSchema.DATE_MODIFIED, value);
  }

  public void clearDateModified() {
    schemaObjectBuilder.clearField(TestSchema.DATE_MODIFIED);
  }

  public void setDatePosted(final Instant value) {
    schemaObjectBuilder.setInstantFieldValue(TestSchema.DATE_POSTED, value);
  }

  public void clearDatePosted() {
    schemaObjectBuilder.clearField(TestSchema.DATE_POSTED);
  }

  public void setDirection(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.DIRECTION, value);
  }

  public void clearDirection() {
    schemaObjectBuilder.clearField(TestSchema.DIRECTION);
  }

  public void setEntities(final Consumer<EntitiesObjectBuilder> director) {
    schemaObjectBuilder.setFlattenedFieldValue(TestSchema.ENTITIES, sBuilder-> {
        final EntitiesObjectBuilder entitiesBuilder = new EntitiesObjectBuilder(sBuilder);
        director.accept(entitiesBuilder);
    });
  }

  public void setEntities(final Stream<Consumer<EntitiesObjectBuilder>> directors) {
      schemaObjectBuilder.setFlattenedFieldValue(TestSchema.ENTITIES,
        directors.<Consumer<SchemaObjectBuilder>>map(director -> {
        return sBuilder -> {
          final EntitiesObjectBuilder entitiesBuilder = new EntitiesObjectBuilder(sBuilder);
          director.accept(entitiesBuilder);
        };
    }));
  }

  public void setEntities(final List<Consumer<EntitiesObjectBuilder>> directors) {
    setEntities(directors.stream());
  }

  public void clearEntities() {
    schemaObjectBuilder.clearField(TestSchema.ENTITIES);
  }

  public void setExtractionIndex(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.EXTRACTION_INDEX, value);
  }

  public void clearExtractionIndex() {
    schemaObjectBuilder.clearField(TestSchema.EXTRACTION_INDEX);
  }

  public void setExtractionType(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.EXTRACTION_TYPE, value);
  }

  public void clearExtractionType() {
    schemaObjectBuilder.clearField(TestSchema.EXTRACTION_TYPE);
  }

  public void setFamilyAddressBcc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_BCC, values);
  }

  public void setFamilyAddressBcc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_BCC, values);
  }

  public void addFamilyAddressBcc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.FAMILY_ADDRESS_BCC, value);
  }

  public void setFamilyAddressBcc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_BCC, value);
  }

  public void clearFamilyAddressBcc() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_BCC);
  }

  public void setFamilyAddressCc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_CC, values);
  }

  public void setFamilyAddressCc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_CC, values);
  }

  public void addFamilyAddressCc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.FAMILY_ADDRESS_CC, value);
  }

  public void setFamilyAddressCc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_CC, value);
  }

  public void clearFamilyAddressCc() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_CC);
  }

  public void setFamilyAddressDisplayBcc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_BCC, values);
  }

  public void setFamilyAddressDisplayBcc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_BCC, values);
  }

  public void addFamilyAddressDisplayBcc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_BCC, value);
  }

  public void setFamilyAddressDisplayBcc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_BCC, value);
  }

  public void clearFamilyAddressDisplayBcc() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_DISPLAY_BCC);
  }

  public void setFamilyAddressDisplayCc(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_CC, values);
  }

  public void setFamilyAddressDisplayCc(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_CC, values);
  }

  public void addFamilyAddressDisplayCc(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_CC, value);
  }

  public void setFamilyAddressDisplayCc(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_CC, value);
  }

  public void clearFamilyAddressDisplayCc() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_DISPLAY_CC);
  }

  public void setFamilyAddressDisplayFrom(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_FROM, value);
  }

  public void clearFamilyAddressDisplayFrom() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_DISPLAY_FROM);
  }

  public void setFamilyAddressDisplayTo(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_TO, values);
  }

  public void setFamilyAddressDisplayTo(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_TO, values);
  }

  public void addFamilyAddressDisplayTo(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_TO, value);
  }

  public void setFamilyAddressDisplayTo(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_DISPLAY_TO, value);
  }

  public void clearFamilyAddressDisplayTo() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_DISPLAY_TO);
  }

  public void setFamilyAddressFrom(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_FROM, value);
  }

  public void clearFamilyAddressFrom() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_FROM);
  }

  public void setFamilyAddressTo(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_TO, values);
  }

  public void setFamilyAddressTo(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_TO, values);
  }

  public void addFamilyAddressTo(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.FAMILY_ADDRESS_TO, value);
  }

  public void setFamilyAddressTo(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_ADDRESS_TO, value);
  }

  public void clearFamilyAddressTo() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_ADDRESS_TO);
  }

  public void setFamilyDatePosted(final Instant value) {
    schemaObjectBuilder.setInstantFieldValue(TestSchema.FAMILY_DATE_POSTED, value);
  }

  public void clearFamilyDatePosted() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_DATE_POSTED);
  }

  public void setFamilyThreadTopic(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_THREAD_TOPIC, value);
  }

  public void clearFamilyThreadTopic() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_THREAD_TOPIC);
  }

  public void setFamilyTitle(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FAMILY_TITLE, value);
  }

  public void clearFamilyTitle() {
    schemaObjectBuilder.clearField(TestSchema.FAMILY_TITLE);
  }

  public void setFileExt(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FILE_EXT, value);
  }

  public void clearFileExt() {
    schemaObjectBuilder.clearField(TestSchema.FILE_EXT);
  }

  public void setFileName(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FILE_NAME, value);
  }

  public void clearFileName() {
    schemaObjectBuilder.clearField(TestSchema.FILE_NAME);
  }

  public void setFileSize(final Long value) {
    schemaObjectBuilder.setLongFieldValue(TestSchema.FILE_SIZE, value);
  }

  public void clearFileSize() {
    schemaObjectBuilder.clearField(TestSchema.FILE_SIZE);
  }

  public void setFilepath(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FILEPATH, value);
  }

  public void clearFilepath() {
    schemaObjectBuilder.clearField(TestSchema.FILEPATH);
  }

  public void setFrom(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.FROM, value);
  }

  public void clearFrom() {
    schemaObjectBuilder.clearField(TestSchema.FROM);
  }

  public void setHasAttachments(final Boolean value) {
    schemaObjectBuilder.setBooleanFieldValue(TestSchema.HAS_ATTACHMENTS, value);
  }

  public void clearHasAttachments() {
    schemaObjectBuilder.clearField(TestSchema.HAS_ATTACHMENTS);
  }

  public void setHash(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.HASH, value);
  }

  public void clearHash() {
    schemaObjectBuilder.clearField(TestSchema.HASH);
  }

  public void setIsOle(final Boolean value) {
    schemaObjectBuilder.setBooleanFieldValue(TestSchema.IS_OLE, value);
  }

  public void clearIsOle() {
    schemaObjectBuilder.clearField(TestSchema.IS_OLE);
  }

  public void setMessageId(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.MESSAGE_ID, value);
  }

  public void clearMessageId() {
    schemaObjectBuilder.clearField(TestSchema.MESSAGE_ID);
  }

  public void setMetadataFiles(final Consumer<MetadataFilesObjectBuilder> director) {
    schemaObjectBuilder.setFlattenedFieldValue(TestSchema.METADATA_FILES, sBuilder-> {
        final MetadataFilesObjectBuilder metadataFilesBuilder = new MetadataFilesObjectBuilder(sBuilder);
        director.accept(metadataFilesBuilder);
    });
  }

  public void setMetadataFiles(final Stream<Consumer<MetadataFilesObjectBuilder>> directors) {
      schemaObjectBuilder.setFlattenedFieldValue(TestSchema.METADATA_FILES,
        directors.<Consumer<SchemaObjectBuilder>>map(director -> {
        return sBuilder -> {
          final MetadataFilesObjectBuilder metadataFilesBuilder = new MetadataFilesObjectBuilder(sBuilder);
          director.accept(metadataFilesBuilder);
        };
    }));
  }

  public void setMetadataFiles(final List<Consumer<MetadataFilesObjectBuilder>> directors) {
    setMetadataFiles(directors.stream());
  }

  public void clearMetadataFiles() {
    schemaObjectBuilder.clearField(TestSchema.METADATA_FILES);
  }

  public void setMimetype(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.MIMETYPE, value);
  }

  public void clearMimetype() {
    schemaObjectBuilder.clearField(TestSchema.MIMETYPE);
  }

  public void setOcr(final Consumer<OcrListObjectBuilder> director) {
    schemaObjectBuilder.setFlattenedFieldValue(TestSchema.OCR, sBuilder-> {
        final OcrListObjectBuilder ocrBuilder = new OcrListObjectBuilder(sBuilder);
        director.accept(ocrBuilder);
    });
  }

  public void setOcr(final Stream<Consumer<OcrListObjectBuilder>> directors) {
      schemaObjectBuilder.setFlattenedFieldValue(TestSchema.OCR,
        directors.<Consumer<SchemaObjectBuilder>>map(director -> {
        return sBuilder -> {
          final OcrListObjectBuilder ocrBuilder = new OcrListObjectBuilder(sBuilder);
          director.accept(ocrBuilder);
        };
    }));
  }

  public void setOcr(final List<Consumer<OcrListObjectBuilder>> directors) {
    setOcr(directors.stream());
  }

  public void clearOcr() {
    schemaObjectBuilder.clearField(TestSchema.OCR);
  }

  public void setParentReference(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.PARENT_REFERENCE, value);
  }

  public void clearParentReference() {
    schemaObjectBuilder.clearField(TestSchema.PARENT_REFERENCE);
  }

  public void setPriority(final Long value) {
    schemaObjectBuilder.setLongFieldValue(TestSchema.PRIORITY, value);
  }

  public void clearPriority() {
    schemaObjectBuilder.clearField(TestSchema.PRIORITY);
  }

  public void setRepoClassification(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_CLASSIFICATION, values);
  }

  public void setRepoClassification(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_CLASSIFICATION, values);
  }

  public void addRepoClassification(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.REPO_CLASSIFICATION, value);
  }

  public void setRepoClassification(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_CLASSIFICATION, value);
  }

  public void clearRepoClassification() {
    schemaObjectBuilder.clearField(TestSchema.REPO_CLASSIFICATION);
  }

  public void setRepoExpandednumber(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_EXPANDEDNUMBER, value);
  }

  public void clearRepoExpandednumber() {
    schemaObjectBuilder.clearField(TestSchema.REPO_EXPANDEDNUMBER);
  }

  public void setRepoFolder(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_FOLDER, value);
  }

  public void clearRepoFolder() {
    schemaObjectBuilder.clearField(TestSchema.REPO_FOLDER);
  }

  public void setRepoLabels(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_LABELS, values);
  }

  public void setRepoLabels(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_LABELS, values);
  }

  public void addRepoLabels(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.REPO_LABELS, value);
  }

  public void setRepoLabels(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_LABELS, value);
  }

  public void clearRepoLabels() {
    schemaObjectBuilder.clearField(TestSchema.REPO_LABELS);
  }

  public void setRepoNotes(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_NOTES, value);
  }

  public void clearRepoNotes() {
    schemaObjectBuilder.clearField(TestSchema.REPO_NOTES);
  }

  public void setRepoRecordnumber(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_RECORDNUMBER, value);
  }

  public void clearRepoRecordnumber() {
    schemaObjectBuilder.clearField(TestSchema.REPO_RECORDNUMBER);
  }

  public void setRepoRecordtype(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.REPO_RECORDTYPE, value);
  }

  public void clearRepoRecordtype() {
    schemaObjectBuilder.clearField(TestSchema.REPO_RECORDTYPE);
  }

  public void setRepoUri(final Long value) {
    schemaObjectBuilder.setLongFieldValue(TestSchema.REPO_URI, value);
  }

  public void clearRepoUri() {
    schemaObjectBuilder.clearField(TestSchema.REPO_URI);
  }

  public void setRootDateModified(final Instant value) {
    schemaObjectBuilder.setInstantFieldValue(TestSchema.ROOT_DATE_MODIFIED, value);
  }

  public void clearRootDateModified() {
    schemaObjectBuilder.clearField(TestSchema.ROOT_DATE_MODIFIED);
  }

  public void setRootFileExt(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ROOT_FILE_EXT, value);
  }

  public void clearRootFileExt() {
    schemaObjectBuilder.clearField(TestSchema.ROOT_FILE_EXT);
  }

  public void setRootFilepath(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ROOT_FILEPATH, value);
  }

  public void clearRootFilepath() {
    schemaObjectBuilder.clearField(TestSchema.ROOT_FILEPATH);
  }

  public void setRootFileSize(final Long value) {
    schemaObjectBuilder.setLongFieldValue(TestSchema.ROOT_FILE_SIZE, value);
  }

  public void clearRootFileSize() {
    schemaObjectBuilder.clearField(TestSchema.ROOT_FILE_SIZE);
  }

  public void setRootRepoClassification(final String... values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ROOT_REPO_CLASSIFICATION, values);
  }

  public void setRootRepoClassification(final List<String> values) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ROOT_REPO_CLASSIFICATION, values);
  }

  public void addRootRepoClassification(final String value) {
    schemaObjectBuilder.addStringFieldValue(TestSchema.ROOT_REPO_CLASSIFICATION, value);
  }

  public void setRootRepoClassification(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ROOT_REPO_CLASSIFICATION, value);
  }

  public void clearRootRepoClassification() {
    schemaObjectBuilder.clearField(TestSchema.ROOT_REPO_CLASSIFICATION);
  }

  public void setRootRepoRecordtype(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.ROOT_REPO_RECORDTYPE, value);
  }

  public void clearRootRepoRecordtype() {
    schemaObjectBuilder.clearField(TestSchema.ROOT_REPO_RECORDTYPE);
  }

  public void setRowCount(final Long value) {
    schemaObjectBuilder.setLongFieldValue(TestSchema.ROW_COUNT, value);
  }

  public void clearRowCount() {
    schemaObjectBuilder.clearField(TestSchema.ROW_COUNT);
  }

  public void setScanReference(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.SCAN_REFERENCE, value);
  }

  public void clearScanReference() {
    schemaObjectBuilder.clearField(TestSchema.SCAN_REFERENCE);
  }

  public void setSourceReference(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.SOURCE_REFERENCE, value);
  }

  public void clearSourceReference() {
    schemaObjectBuilder.clearField(TestSchema.SOURCE_REFERENCE);
  }

  public void setTest(final Consumer<TestObjectBuilder> director) {
    schemaObjectBuilder.setFlattenedFieldValue(TestSchema.TEST, sBuilder-> {
        final TestObjectBuilder testBuilder = new TestObjectBuilder(sBuilder);
        director.accept(testBuilder);
    });
  }

  public void setTest(final Stream<Consumer<TestObjectBuilder>> directors) {
      schemaObjectBuilder.setFlattenedFieldValue(TestSchema.TEST,
        directors.<Consumer<SchemaObjectBuilder>>map(director -> {
        return sBuilder -> {
          final TestObjectBuilder testBuilder = new TestObjectBuilder(sBuilder);
          director.accept(testBuilder);
        };
    }));
  }

  public void setTest(final List<Consumer<TestObjectBuilder>> directors) {
    setTest(directors.stream());
  }

  public void clearTest() {
    schemaObjectBuilder.clearField(TestSchema.TEST);
  }

  public void setTestJson(final Consumer<TestJsonListObjectBuilder> director) {
    final TestJsonListObjectBuilder testJsonBuilder = new TestJsonListObjectBuilder();
    director.accept(testJsonBuilder);
    schemaObjectBuilder.setJsonFieldValue(
      TestSchema.TEST_JSON,
      jsonBuilder -> {
        testJsonBuilder.build(jsonBuilder);
    }
    );
  }

  public void setTestJson(final Stream<Consumer<TestJsonListObjectBuilder>> directors) {
    schemaObjectBuilder.setJsonFieldValue(
      TestSchema.TEST_JSON,
      directors.<Consumer<JsonBuilder>>map(director -> {
        final TestJsonListObjectBuilder testJsonBuilder = new TestJsonListObjectBuilder();
        director.accept(testJsonBuilder);
        return jsonBuilder -> {
          testJsonBuilder.build(jsonBuilder);
        };
    }));
  }

  public void setTestJson(final List<Consumer<TestJsonListObjectBuilder>> directors) {
    setTestJson(directors.stream());
  }

  public void clearTestJson() {
    schemaObjectBuilder.clearField(TestSchema.TEST_JSON);
  }

  public void setTableType(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.TABLE_TYPE, value);
  }

  public void clearTableType() {
    schemaObjectBuilder.clearField(TestSchema.TABLE_TYPE);
  }

  public void setThreadIndex(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.THREAD_INDEX, value);
  }

  public void clearThreadIndex() {
    schemaObjectBuilder.clearField(TestSchema.THREAD_INDEX);
  }

  public void setThreadReplyTo(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.THREAD_REPLY_TO, value);
  }

  public void clearThreadReplyTo() {
    schemaObjectBuilder.clearField(TestSchema.THREAD_REPLY_TO);
  }

  public void setThreadTopic(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.THREAD_TOPIC, value);
  }

  public void clearThreadTopic() {
    schemaObjectBuilder.clearField(TestSchema.THREAD_TOPIC);
  }

  public void setTitle(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.TITLE, value);
  }

  public void clearTitle() {
    schemaObjectBuilder.clearField(TestSchema.TITLE);
  }

  public void setTo(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.TO, value);
  }

  public void clearTo() {
    schemaObjectBuilder.clearField(TestSchema.TO);
  }

  public void setType(final String value) {
    schemaObjectBuilder.setStringFieldValue(TestSchema.TYPE, value);
  }

  public void clearType() {
    schemaObjectBuilder.clearField(TestSchema.TYPE);
  }

  private void validate() {
  }

  public static final class AccountsObjectBuilder {
    private String displayName;

    private List<String> handles;

    private String identifier;

    private String identifierType;

    private Boolean sender;

    private AccountsObjectBuilder() {
    }

    public void setDisplayName(final String value) {
      this.displayName = value;
    }

    public void clearDisplayName() {
      displayName = null;
    }

    public void setHandles(final String... values) {
      this.handles = Arrays.asList(values);
    }

    public void setHandles(final List<String> values) {
      this.handles = values;
    }

    public void addHandles(final String value) {
      if (handles == null) {
        this.handles = new ArrayList<String>();
      }
      this.handles.add(value);
    }

    public void setHandles(final String value) {
      this.handles = new ArrayList<String>();
      this.handles.add(value);
    }

    public void clearHandles() {
      handles = null;
    }

    public void setIdentifier(final String value) {
      this.identifier = value;
    }

    public void clearIdentifier() {
      identifier = null;
    }

    public void setIdentifierType(final String value) {
      this.identifierType = value;
    }

    public void clearIdentifierType() {
      identifierType = null;
    }

    public void setSender(final Boolean value) {
      this.sender = value;
    }

    public void clearSender() {
      sender = null;
    }

    private void build(final JsonBuilder jsonBuilder) {
      jsonBuilder.writeStartObject();
      if (displayName != null) {
        jsonBuilder.writeFieldName(TestSchema.ACCOUNTS.DISPLAY_NAME.getFieldName());
        jsonBuilder.writeString(displayName);
      }
      if (handles != null) {
        jsonBuilder.writeFieldName(TestSchema.ACCOUNTS.HANDLES.getFieldName());
        jsonBuilder.writeStartArray();
        for(final String value : handles) {
          jsonBuilder.writeString(value);
        }
        jsonBuilder.writeEndArray();
      }
      if (identifier != null) {
        jsonBuilder.writeFieldName(TestSchema.ACCOUNTS.IDENTIFIER.getFieldName());
        jsonBuilder.writeString(identifier);
      }
      if (identifierType != null) {
        jsonBuilder.writeFieldName(TestSchema.ACCOUNTS.IDENTIFIER_TYPE.getFieldName());
        jsonBuilder.writeString(identifierType);
      }
      if (sender != null) {
        jsonBuilder.writeFieldName(TestSchema.ACCOUNTS.SENDER.getFieldName());
        jsonBuilder.writeBoolean(sender);
      }
      jsonBuilder.writeEndObject();
    }
  }

  public static final class ColumnsObjectBuilder {
    private List<GrammarMatchesObjectBuilder> grammarMatches;

    private String name;

    private String reviewedBy;

    private String reviewerComments;

    private String selectedGrammarRule;

    private String status;

    private String type;

    private ColumnsObjectBuilder() {
    }

    public void setGrammarMatches(final Consumer<GrammarMatchesObjectBuilder> director) {
      final GrammarMatchesObjectBuilder grammarMatchesBuilder = new GrammarMatchesObjectBuilder();
      director.accept(grammarMatchesBuilder);
      grammarMatches = new ArrayList<>();
      grammarMatches.add(grammarMatchesBuilder);
    }

    public void setGrammarMatches(final Stream<Consumer<GrammarMatchesObjectBuilder>> directors) {
      grammarMatches = directors.map(director -> {
        final GrammarMatchesObjectBuilder grammarMatchesBuilder = new GrammarMatchesObjectBuilder();
        director.accept(grammarMatchesBuilder);
        return grammarMatchesBuilder;
      }).collect(Collectors.toList());
    }

    public void setGrammarMatches(final List<Consumer<GrammarMatchesObjectBuilder>> directors) {
      setGrammarMatches(directors.stream());
    }

    public void clearGrammarMatches() {
      grammarMatches = null;
    }

    public void setName(final String value) {
      this.name = value;
    }

    public void clearName() {
      name = null;
    }

    public void setReviewedBy(final String value) {
      this.reviewedBy = value;
    }

    public void clearReviewedBy() {
      reviewedBy = null;
    }

    public void setReviewerComments(final String value) {
      this.reviewerComments = value;
    }

    public void clearReviewerComments() {
      reviewerComments = null;
    }

    public void setSelectedGrammarRule(final String value) {
      this.selectedGrammarRule = value;
    }

    public void clearSelectedGrammarRule() {
      selectedGrammarRule = null;
    }

    public void setStatus(final String value) {
      this.status = value;
    }

    public void clearStatus() {
      status = null;
    }

    public void setType(final String value) {
      this.type = value;
    }

    public void clearType() {
      type = null;
    }

    private void build(final JsonBuilder jsonBuilder) {
      jsonBuilder.writeStartObject();
      if (grammarMatches != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.GRAMMAR_MATCHES.getFieldName());
        jsonBuilder.writeStartArray();
        for(final GrammarMatchesObjectBuilder value : grammarMatches) {
          value.build(jsonBuilder);
        }
        jsonBuilder.writeEndArray();
      }
      if (name != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.NAME.getFieldName());
        jsonBuilder.writeString(name);
      }
      if (reviewedBy != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.REVIEWED_BY.getFieldName());
        jsonBuilder.writeString(reviewedBy);
      }
      if (reviewerComments != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.REVIEWER_COMMENTS.getFieldName());
        jsonBuilder.writeString(reviewerComments);
      }
      if (selectedGrammarRule != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.SELECTED_GRAMMAR_RULE.getFieldName());
        jsonBuilder.writeString(selectedGrammarRule);
      }
      if (status != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.STATUS.getFieldName());
        jsonBuilder.writeString(status);
      }
      if (type != null) {
        jsonBuilder.writeFieldName(TestSchema.COLUMNS.TYPE.getFieldName());
        jsonBuilder.writeString(type);
      }
      jsonBuilder.writeEndObject();
    }

    public static final class GrammarMatchesObjectBuilder {
      private List<String> rules;

      private Integer weight;

      private GrammarMatchesObjectBuilder() {
      }

      public void setRules(final String... values) {
        this.rules = Arrays.asList(values);
      }

      public void setRules(final List<String> values) {
        this.rules = values;
      }

      public void addRules(final String value) {
        if (rules == null) {
          this.rules = new ArrayList<String>();
        }
        this.rules.add(value);
      }

      public void setRules(final String value) {
        this.rules = new ArrayList<String>();
        this.rules.add(value);
      }

      public void clearRules() {
        rules = null;
      }

      public void setWeight(final Integer value) {
        this.weight = value;
      }

      public void clearWeight() {
        weight = null;
      }

      private void build(final JsonBuilder jsonBuilder) {
        jsonBuilder.writeStartObject();
        if (rules != null) {
          jsonBuilder.writeFieldName(TestSchema.COLUMNS.GRAMMAR_MATCHES.RULES.getFieldName());
          jsonBuilder.writeStartArray();
          for(final String value : rules) {
            jsonBuilder.writeString(value);
          }
          jsonBuilder.writeEndArray();
        }
        if (weight != null) {
          jsonBuilder.writeFieldName(TestSchema.COLUMNS.GRAMMAR_MATCHES.WEIGHT.getFieldName());
          jsonBuilder.writeInteger(weight);
        }
        jsonBuilder.writeEndObject();
      }
    }
  }

  public static final class EntitiesObjectBuilder {
    private final SchemaObjectBuilder schemaObjectBuilder;

    public EntitiesObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
      this.schemaObjectBuilder = schemaObjectBuilder;
    }

    public void setEntityCategoryId(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.ENTITY_CATEGORY_ID, value);
    }

    public void clearEntityCategoryId() {
      schemaObjectBuilder.clearField(TestSchema.ENTITIES.ENTITY_CATEGORY_ID);
    }

    public void setMatches(final Consumer<MatchesListObjectBuilder> director) {
      schemaObjectBuilder.setFlattenedFieldValue(TestSchema.ENTITIES.MATCHES, sBuilder-> {
          final MatchesListObjectBuilder matchesBuilder = new MatchesListObjectBuilder(sBuilder);
          director.accept(matchesBuilder);
      });
    }

    public void setMatches(final Stream<Consumer<MatchesListObjectBuilder>> directors) {
        schemaObjectBuilder.setFlattenedFieldValue(TestSchema.ENTITIES.MATCHES,
          directors.<Consumer<SchemaObjectBuilder>>map(director -> {
          return sBuilder -> {
            final MatchesListObjectBuilder matchesBuilder = new MatchesListObjectBuilder(sBuilder);
            director.accept(matchesBuilder);
          };
      }));
    }

    public void setMatches(final List<Consumer<MatchesListObjectBuilder>> directors) {
      setMatches(directors.stream());
    }

    public void clearMatches() {
      schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES);
    }

    public void setEntityId(final String... values) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.ENTITY_ID, values);
    }

    public void setEntityId(final List<String> values) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.ENTITY_ID, values);
    }

    public void addEntityId(final String value) {
      schemaObjectBuilder.addStringFieldValue(TestSchema.ENTITIES.ENTITY_ID, value);
    }

    public void setEntityId(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.ENTITY_ID, value);
    }

    public void clearEntityId() {
      schemaObjectBuilder.clearField(TestSchema.ENTITIES.ENTITY_ID);
    }

    public void setGrammarId(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.GRAMMAR_ID, value);
    }

    public void clearGrammarId() {
      schemaObjectBuilder.clearField(TestSchema.ENTITIES.GRAMMAR_ID);
    }

    private void validate() {
    }

    public static final class MatchesListObjectBuilder {
      private final SchemaObjectBuilder schemaObjectBuilder;

      public MatchesListObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
        this.schemaObjectBuilder = schemaObjectBuilder;
      }

      public void set(final Consumer<MatchesObjectBuilder> director) {
        this.schemaObjectBuilder.setFlattenedFieldValue(null, builder -> {
            final MatchesObjectBuilder matchesObjectBuilder = new MatchesObjectBuilder(builder);
            director.accept(matchesObjectBuilder);
            matchesObjectBuilder.validate();
        });
      }

      public void set(final Stream<Consumer<MatchesObjectBuilder>> directors) {
        this.schemaObjectBuilder.setFlattenedFieldValue(null, directors.map(director -> builder -> {
            final MatchesObjectBuilder matchesObjectBuilder = new MatchesObjectBuilder(builder);
            director.accept(matchesObjectBuilder);
            matchesObjectBuilder.validate();
        }));
      }

      public void set(final List<Consumer<MatchesObjectBuilder>> directors) {
        set(directors.stream());
      }

      public void clear() {
        this.schemaObjectBuilder.clearField(null);
      }
    }

    public static final class MatchesObjectBuilder {
      private final SchemaObjectBuilder schemaObjectBuilder;

      private boolean isEgrammarsbuilderSet;

      public MatchesObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
        this.schemaObjectBuilder = schemaObjectBuilder;
      }

      public void setContext(final String... values) {
        schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.CONTEXT, values);
      }

      public void setContext(final List<String> values) {
        schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.CONTEXT, values);
      }

      public void addContext(final String value) {
        schemaObjectBuilder.addStringFieldValue(TestSchema.ENTITIES.MATCHES.CONTEXT, value);
      }

      public void setContext(final String value) {
        schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.CONTEXT, value);
      }

      public void clearContext() {
        schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES.CONTEXT);
      }

      public void setValue(final String value) {
        schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.VALUE, value);
      }

      public void clearValue() {
        schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES.VALUE);
      }

      public void setEgrammars(final Consumer<EgrammarsObjectBuilder> director) {
        schemaObjectBuilder.setFlattenedFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS, sBuilder-> {
            final EgrammarsObjectBuilder egrammarsBuilder = new EgrammarsObjectBuilder(sBuilder);
            director.accept(egrammarsBuilder);
        });
        isEgrammarsbuilderSet = true;
      }

      public void setEgrammars(final Stream<Consumer<EgrammarsObjectBuilder>> directors) {
          schemaObjectBuilder.setFlattenedFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS,
            directors.<Consumer<SchemaObjectBuilder>>map(director -> {
            return sBuilder -> {
              final EgrammarsObjectBuilder egrammarsBuilder = new EgrammarsObjectBuilder(sBuilder);
              director.accept(egrammarsBuilder);
            };
        }));
        isEgrammarsbuilderSet = true;
      }

      public void setEgrammars(final List<Consumer<EgrammarsObjectBuilder>> directors) {
        setEgrammars(directors.stream());
      }

      public void clearEgrammars() {
        schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES.EGRAMMARS);
        isEgrammarsbuilderSet = false;
      }

      public void setScore(final Double value) {
        schemaObjectBuilder.setDoubleFieldValue(TestSchema.ENTITIES.MATCHES.SCORE, value);
      }

      public void clearScore() {
        schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES.SCORE);
      }

      private void validate() {
        if (!isEgrammarsbuilderSet) {
          throw new IllegalArgumentException("Mandatory field 'TestSchema.ENTITIES.MATCHES.EGRAMMARS' is not set");
        }
      }

      public static final class EgrammarsObjectBuilder {
        private final SchemaObjectBuilder schemaObjectBuilder;

        private boolean isGcontextSet;

        public EgrammarsObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
          this.schemaObjectBuilder = schemaObjectBuilder;
        }

        public void setGcontext(final String... values) {
          schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GCONTEXT, values);
          isGcontextSet = true;
        }

        public void setGcontext(final List<String> values) {
          schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GCONTEXT, values);
          isGcontextSet = true;
        }

        public void addGcontext(final String value) {
          schemaObjectBuilder.addStringFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GCONTEXT, value);
          isGcontextSet = true;
        }

        public void setGcontext(final String value) {
          schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GCONTEXT, value);
          isGcontextSet = true;
        }

        public void clearGcontext() {
          schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GCONTEXT);
          isGcontextSet = false;
        }

        public void setGvalue(final String value) {
          schemaObjectBuilder.setStringFieldValue(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GVALUE, value);
        }

        public void clearGvalue() {
          schemaObjectBuilder.clearField(TestSchema.ENTITIES.MATCHES.EGRAMMARS.GVALUE);
        }

        private void validate() {
          if (!isGcontextSet) {
            throw new IllegalArgumentException("Mandatory field 'TestSchema.ENTITIES.MATCHES.EGRAMMARS.GCONTEXT' is not set");
          }
        }
      }
    }
  }

  public static final class MetadataFilesObjectBuilder {
    private final SchemaObjectBuilder schemaObjectBuilder;

    private boolean isContentSet;

    private boolean isExtensionSet;

    public MetadataFilesObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
      this.schemaObjectBuilder = schemaObjectBuilder;
    }

    public void setContent(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.METADATA_FILES.CONTENT, value);
      isContentSet = true;
    }

    public void clearContent() {
      schemaObjectBuilder.clearField(TestSchema.METADATA_FILES.CONTENT);
      isContentSet = false;
    }

    public void setExtension(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.METADATA_FILES.EXTENSION, value);
      isExtensionSet = true;
    }

    public void clearExtension() {
      schemaObjectBuilder.clearField(TestSchema.METADATA_FILES.EXTENSION);
      isExtensionSet = false;
    }

    private void validate() {
      if (!isContentSet) {
        throw new IllegalArgumentException("Mandatory field 'TestSchema.METADATA_FILES.CONTENT' is not set");
      }
      if (!isExtensionSet) {
        throw new IllegalArgumentException("Mandatory field 'TestSchema.METADATA_FILES.EXTENSION' is not set");
      }
    }
  }

  public static final class OcrListObjectBuilder {
    private final SchemaObjectBuilder schemaObjectBuilder;

    public OcrListObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
      this.schemaObjectBuilder = schemaObjectBuilder;
    }

    public void set(final Consumer<OcrObjectBuilder> director) {
      this.schemaObjectBuilder.setFlattenedFieldValue(null, builder -> {
          final OcrObjectBuilder ocrObjectBuilder = new OcrObjectBuilder(builder);
          director.accept(ocrObjectBuilder);
          ocrObjectBuilder.validate();
      });
    }

    public void set(final Stream<Consumer<OcrObjectBuilder>> directors) {
      this.schemaObjectBuilder.setFlattenedFieldValue(null, directors.map(director -> builder -> {
          final OcrObjectBuilder ocrObjectBuilder = new OcrObjectBuilder(builder);
          director.accept(ocrObjectBuilder);
          ocrObjectBuilder.validate();
      }));
    }

    public void set(final List<Consumer<OcrObjectBuilder>> directors) {
      set(directors.stream());
    }

    public void clear() {
      this.schemaObjectBuilder.clearField(null);
    }
  }

  public static final class OcrObjectBuilder {
    private final SchemaObjectBuilder schemaObjectBuilder;

    private boolean isConfidenceSet;

    private boolean isValueSet;

    public OcrObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
      this.schemaObjectBuilder = schemaObjectBuilder;
    }

    public void setConfidence(final Integer value) {
      schemaObjectBuilder.setIntegerFieldValue(TestSchema.OCR.CONFIDENCE, value);
      isConfidenceSet = true;
    }

    public void clearConfidence() {
      schemaObjectBuilder.clearField(TestSchema.OCR.CONFIDENCE);
      isConfidenceSet = false;
    }

    public void setName(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.OCR.NAME, value);
    }

    public void clearName() {
      schemaObjectBuilder.clearField(TestSchema.OCR.NAME);
    }

    public void setType(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.OCR.TYPE, value);
    }

    public void clearType() {
      schemaObjectBuilder.clearField(TestSchema.OCR.TYPE);
    }

    public void setValue(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.OCR.VALUE, value);
      isValueSet = true;
    }

    public void clearValue() {
      schemaObjectBuilder.clearField(TestSchema.OCR.VALUE);
      isValueSet = false;
    }

    private void validate() {
      if (!isConfidenceSet) {
        throw new IllegalArgumentException("Mandatory field 'TestSchema.OCR.CONFIDENCE' is not set");
      }
      if (!isValueSet) {
        throw new IllegalArgumentException("Mandatory field 'TestSchema.OCR.VALUE' is not set");
      }
    }
  }

  public static final class TestObjectBuilder {
    private final SchemaObjectBuilder schemaObjectBuilder;

    public TestObjectBuilder(final SchemaObjectBuilder schemaObjectBuilder) {
      this.schemaObjectBuilder = schemaObjectBuilder;
    }

    public void setTestId(final String value) {
      schemaObjectBuilder.setStringFieldValue(TestSchema.TEST.TEST_ID, value);
    }

    public void clearTestId() {
      schemaObjectBuilder.clearField(TestSchema.TEST.TEST_ID);
    }

    public void setTestMatches(final Consumer<TestMatchesObjectBuilder> director) {
      final TestMatchesObjectBuilder testMatchesBuilder = new TestMatchesObjectBuilder();
      director.accept(testMatchesBuilder);
      schemaObjectBuilder.setJsonFieldValue(
        TestSchema.TEST.TEST_MATCHES,
        jsonBuilder -> {
          testMatchesBuilder.build(jsonBuilder);
      }
      );
    }

    public void setTestMatches(final Stream<Consumer<TestMatchesObjectBuilder>> directors) {
      schemaObjectBuilder.setJsonFieldValue(
        TestSchema.TEST.TEST_MATCHES,
        directors.<Consumer<JsonBuilder>>map(director -> {
          final TestMatchesObjectBuilder testMatchesBuilder = new TestMatchesObjectBuilder();
          director.accept(testMatchesBuilder);
          return jsonBuilder -> {
            testMatchesBuilder.build(jsonBuilder);
          };
      }));
    }

    public void setTestMatches(final List<Consumer<TestMatchesObjectBuilder>> directors) {
      setTestMatches(directors.stream());
    }

    public void clearTestMatches() {
      schemaObjectBuilder.clearField(TestSchema.TEST.TEST_MATCHES);
    }

    private void validate() {
    }

    public static final class TestMatchesObjectBuilder {
      private String type;

      private String value;

      private TestMatchesObjectBuilder() {
      }

      public void setType(final String value) {
        this.type = value;
      }

      public void clearType() {
        type = null;
      }

      public void setValue(final String value) {
        this.value = value;
      }

      public void clearValue() {
        value = null;
      }

      private void build(final JsonBuilder jsonBuilder) {
        jsonBuilder.writeStartObject();
        if (type != null) {
          jsonBuilder.writeFieldName(TestSchema.TEST.TEST_MATCHES.TYPE.getFieldName());
          jsonBuilder.writeString(type);
        }
        if (value != null) {
          jsonBuilder.writeFieldName(TestSchema.TEST.TEST_MATCHES.VALUE.getFieldName());
          jsonBuilder.writeString(value);
        }
        jsonBuilder.writeEndObject();
      }
    }
  }

  public static final class TestJsonListObjectBuilder {
    private List<TestJsonObjectBuilder> testJsonBuilders;

    private TestJsonListObjectBuilder() {
    }

    public void set(final Consumer<TestJsonObjectBuilder> director) {
      final TestJsonObjectBuilder testJsonObjectBuilder = new TestJsonObjectBuilder();
      director.accept(testJsonObjectBuilder);
      testJsonBuilders = new ArrayList<>();
      testJsonBuilders.add(testJsonObjectBuilder);
    }

    public void set(final Stream<Consumer<TestJsonObjectBuilder>> directors) {
      testJsonBuilders = directors.map(director -> {
        final TestJsonObjectBuilder testJsonObjectBuilder = new TestJsonObjectBuilder();
        director.accept(testJsonObjectBuilder);
        return testJsonObjectBuilder;
      }).collect(Collectors.toList());
    }

    public void set(final List<Consumer<TestJsonObjectBuilder>> directors) {
      set(directors.stream());
    }

    public void clear() {
      testJsonBuilders = null;
    }

    private void build(final JsonBuilder jsonBuilder) {
      jsonBuilder.writeStartArray();
      if (testJsonBuilders != null) {
        for (final TestJsonObjectBuilder value : testJsonBuilders) {
          value.build(jsonBuilder);
        }
      }
      jsonBuilder.writeEndArray();
    }
  }

  public static final class TestJsonObjectBuilder {
    private String someType;

    private String someValue;

    private TestJsonObjectBuilder() {
    }

    public void setSomeType(final String value) {
      this.someType = value;
    }

    public void clearSomeType() {
      someType = null;
    }

    public void setSomeValue(final String value) {
      this.someValue = value;
    }

    public void clearSomeValue() {
      someValue = null;
    }

    private void build(final JsonBuilder jsonBuilder) {
      jsonBuilder.writeStartObject();
      if (someType != null) {
        jsonBuilder.writeFieldName(TestSchema.TEST_JSON.SOME_TYPE.getFieldName());
        jsonBuilder.writeString(someType);
      }
      if (someValue != null) {
        jsonBuilder.writeFieldName(TestSchema.TEST_JSON.SOME_VALUE.getFieldName());
        jsonBuilder.writeString(someValue);
      }
      jsonBuilder.writeEndObject();
    }
  }
}
