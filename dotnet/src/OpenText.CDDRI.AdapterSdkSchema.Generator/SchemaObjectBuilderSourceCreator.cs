/**
 * Copyright 2022-2024 Open Text.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.Json.Nodes;
using System.Text.RegularExpressions;
using Microsoft.CSharp;

namespace OpenText.CDDRI.AdapterSdkSchema
{
    public class SchemaObjectBuilderSourceCreator
    {
        private static readonly string BUILDER_CLASS_NAME = "AdapterSdkSchemaObjectBuilder";
        private static readonly Dictionary<string, Type> PROPERTY_TYPES_LOOKUP = new() {
            { "STRING", typeof(string) },
            { "FULLTEXT", typeof(string) },
            { "LONG", typeof(long) },
            { "DOUBLE", typeof(double) },
            { "INTEGER", typeof(int) },
            { "BOOLEAN", typeof(bool) },
            { "DATETIME", typeof(DateTime) }
        };
        private static readonly Dictionary<string, string> PROPERTY_NULLABLE_TYPES_LOOKUP = new() {
            { "STRING", typeof(string).Name },
            { "FULLTEXT", typeof(string).Name },
            { "LONG", "long?" },
            { "DOUBLE", "double?" },
            { "INTEGER", "int?" },
            { "BOOLEAN", "bool?" },
            { "DATETIME", "DateTime" }
        };
        private static readonly Dictionary<string, string> PROPERTY_TYPES_METHOD_LOOKUP = new() {
            { "STRING", "String" },
            { "FULLTEXT", "String" },
            { "LONG", "Long" },
            { "DOUBLE", "Double" },
            { "INTEGER", "Integer" },
            { "BOOLEAN", "Boolean" },
            { "DATETIME", "Instant" }
        };

        private static JsonNode typesNode;

        private SchemaObjectBuilderSourceCreator()
        {
        }

        public static string Create()
        {
            JsonNode schemaJson = SchemaGeneratorHelper.ParseSchemaDefinition();
            typesNode = schemaJson["types"].AsObject();
            CodeCompileUnit schemaCompileUnit = new();

            // Create namespace
            CodeNamespace schemaNamespace = new(SchemaGeneratorHelper.NAMESPACE_NAME);

            schemaNamespace.Imports.Add(new CodeNamespaceImport("System"));
            schemaNamespace.Imports.Add(new CodeNamespaceImport("System.Collections.Generic"));
            schemaNamespace.Imports.Add(new CodeNamespaceImport("System.Linq"));

            schemaCompileUnit.Namespaces.Add(schemaNamespace);
            schemaNamespace.Comments.Add(
                new CodeCommentStatement("This file is auto-generated by SchemaGenerator"));

            var schemaClassBuilder = new SchemaObjectBuilderSourceCreator().CreateSchemaObjectBuilderSource(
                BUILDER_CLASS_NAME, false, null, null, schemaJson["fields"].AsObject(), new String[0], "", true, true);
            schemaNamespace.Types.Add(schemaClassBuilder);

            using StringWriter writer = new();
            CSharpCodeProvider provider = new();
            provider.GenerateCodeFromCompileUnit(schemaCompileUnit, writer, new CodeGeneratorOptions());

            var schemaObjectBuilderSource = writer.ToString();

            Debug.WriteLine("Schema source : " + schemaObjectBuilderSource);
            return schemaObjectBuilderSource;
        }

        private CodeTypeDeclaration CreateSchemaObjectBuilderSource(
            string builderClassName,
            bool isEntityTypeObjectBuilderClass,
            CodeMemberMethod buildFunctionBuilder,
            CodeMemberMethod validateFunctionBuilder,
            JsonNode schemaNode,
            string[] path,
            string parentFieldName,
            bool isParentFieldFlattened,
            bool isMainClass
        )
        {
            // Define the schema object builder class
            CodeTypeDeclaration schemaClassBuilder = new(builderClassName)
            {
                TypeAttributes = TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.Class
            };

            AddSchemaObjectBuilderFieldAndCtor(schemaClassBuilder, isMainClass);

            // Create a 'validate' method
            CodeMemberMethod parentValidator = validateFunctionBuilder;

            validateFunctionBuilder = new()
            {
                Name = "Validate",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            // Add property setters
            AddPropertySetters(
                schemaClassBuilder,
                isEntityTypeObjectBuilderClass,
                buildFunctionBuilder,
                validateFunctionBuilder,
                schemaNode,
                path,
                parentFieldName,
                isParentFieldFlattened
            );

            schemaClassBuilder.Members.Add(validateFunctionBuilder);

            if (parentValidator != null)
            {
                validateFunctionBuilder = parentValidator;
            }

            return schemaClassBuilder;
        }

        private static void AddSchemaObjectBuilderFieldAndCtor(CodeTypeDeclaration schemaClassBuilder, bool isMainClass)
        {
            CodeMemberField field = new()
            {
                Name = "_schemaObjectBuilder",
                Attributes = MemberAttributes.Private,
                Type = new CodeTypeReference("readonly ISchemaObjectBuilder")
            };

            schemaClassBuilder.Members.Add(field);

            CodeParameterDeclarationExpression ctorParam = new(new CodeTypeReference("ISchemaObjectBuilder"), "schemaObjectBuilder");
            MemberAttributes ctorAttrs = isMainClass
                ? MemberAttributes.Public | MemberAttributes.Final
                : MemberAttributes.Assembly | MemberAttributes.Final;
            CodeConstructor constructor = new()
            {
                Attributes = ctorAttrs
            };
            constructor.Parameters.Add(ctorParam);
            CodeAssignStatement ctorBodyFieldInit = new()
            {
                Left = new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_schemaObjectBuilder"),
                Right = new CodeSnippetExpression("schemaObjectBuilder")
            };
            constructor.Statements.Add(ctorBodyFieldInit);

            schemaClassBuilder.Members.Add(constructor);
        }

        private void AddPropertySetters(
            CodeTypeDeclaration objectBuilderClassBuilder,
            bool isEntityTypeObjectBuilderClass,
            CodeMemberMethod buildFunctionBuilder,
            CodeMemberMethod validateFunctionBuilder,
            JsonNode entityDef,
            string[] path,
            string parentFieldName,
            bool isParentFieldFlattened
        )
        {
            IEnumerator<KeyValuePair<string, JsonNode>> propertyIterator = entityDef.AsObject().GetEnumerator();

            bool isSubfield = path.Length > 0;

            while (propertyIterator.MoveNext())
            {
                KeyValuePair<string, JsonNode> property = propertyIterator.Current;
                JsonNode fieldAttributes = property.Value;
                string propertyName = property.Key;

                string fieldType = fieldAttributes["type"].GetValue<string>();

                int endOfArrayDimension = fieldType.LastIndexOf('[');

                string fieldTypeValue = endOfArrayDimension > 0
                    ? fieldType.Substring(0, endOfArrayDimension)
                    : fieldType;

                int numberOfDimensions = endOfArrayDimension > 0
                    ? Regex.Matches(fieldType, Regex.Escape("[]")).Count
                    : 0;

                bool isFlattened = fieldAttributes["objectEncoding"] != null
                    && fieldAttributes["objectEncoding"].GetValue<string>().Equals("flattened");

                bool isFieldMultiValued = fieldType.EndsWith("[]");

                bool isFieldMandatory = fieldAttributes["mandatory"] != null
                    && Boolean.Parse(fieldAttributes["mandatory"].GetValue<string>());

                string fieldFunctionName = SchemaGeneratorHelper.ToProperCase(propertyName);

                if (isFieldMandatory && !isEntityTypeObjectBuilderClass)
                {
                    // This is a mandatory field of the main Schema
                    // Add instance variable for checking if field is set
                    string validatorFieldName = SchemaGeneratorHelper.ToValidatorFieldName(propertyName);
                    AddValidateField(objectBuilderClassBuilder, validatorFieldName);

                    // Update validate function
                    CheckFieldsInValidateMethod(validateFunctionBuilder, null, propertyName, validatorFieldName);
                }

                if (!SchemaGeneratorHelper.PROPERTY_TYPES.Contains(fieldType))
                {
                    // Entity/Object type field
                    AddEntityTypePropertySetters(
                        objectBuilderClassBuilder,
                        isEntityTypeObjectBuilderClass,
                        buildFunctionBuilder,
                        validateFunctionBuilder,
                        fieldFunctionName,
                        fieldType,
                        fieldTypeValue,
                        isFieldMandatory,
                        isFieldMultiValued,
                        numberOfDimensions,
                        isSubfield,
                        path,
                        propertyName,
                        parentFieldName,
                        isFlattened,
                        isParentFieldFlattened
                    );
                }
                else
                {
                    // non entity type field
                    AddNonEntityTypePropertySetterMethods(
                        objectBuilderClassBuilder,
                        buildFunctionBuilder,
                        validateFunctionBuilder,
                        fieldFunctionName,
                        fieldTypeValue,
                        isFieldMandatory,
                        isFieldMultiValued,
                        isSubfield,
                        propertyName,
                        parentFieldName,
                        isParentFieldFlattened
                    );
                }
            }
        }

        private void AddEntityTypePropertySetters(
            CodeTypeDeclaration objectBuilderClassBuilder,
            bool isEntityTypeObjectBuilderClass,
            CodeMemberMethod buildFunctionBuilder,
            CodeMemberMethod validateFunctionBuilder,
            string fieldFunctionName,
            string fieldType,
            string fieldTypeValue,
            bool isFieldMandatory,
            bool isFieldMultiValued,
            int numberOfDimensions,
            bool isSubfield,
            string[] path,
            string propertyName,
            string parentFieldName,
            bool isFlattened,
            bool isParentFieldFlattened
        )
        {
            string objBuilderClassName = fieldFunctionName + "ObjectBuilder";
            int endOfTypeName = fieldType.IndexOf('[');
            string refTypeName = endOfTypeName > 0
                        ? fieldType.Substring(0, endOfTypeName)
                        : fieldType;
            JsonNode subentityDef = typesNode[refTypeName];

            string[] newPath = SchemaGeneratorHelper.AddExtraElement(path, objBuilderClassName);
            string fullName = isSubfield ? parentFieldName + "." + propertyName : propertyName;

            string builderTypeName = "Action<" + objBuilderClassName + ">";

            string internalVarName = SchemaGeneratorHelper.ToFieldNameCase(propertyName);
            string internalBuilderVarName = internalVarName + "Builder";

            // Add clear field method body
            CodeMemberMethod clearFieldMethodBuilder = new()
            {
                Name = "Clear" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            // Add setters, clear, and list object builder classes
            // "ocr[][]" // every additional dimension would need a ListBuilder
            string validatorSubFieldName = SchemaGeneratorHelper.ToValidatorFieldName(internalBuilderVarName);
            if (numberOfDimensions > 1)
            {
                AddMultiDimensionalEntityTypeProperty(
                    objectBuilderClassBuilder,
                    isEntityTypeObjectBuilderClass,
                    objBuilderClassName,
                    internalBuilderVarName,
                    fieldFunctionName,
                    fullName,
                    internalVarName,
                    numberOfDimensions,
                    isFlattened,
                    isFieldMandatory,
                    isSubfield,
                    validatorSubFieldName
                );
                // Add 'clear' field method body
                clearFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(
                        new StringBuilder("_schemaObjectBuilder.ClearField(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(fullName)
                        .Append(")")
                        .ToString()
                    )
                );
            }
            else
            {
                // Single dimension field
                if (isFlattened)
                {
                    // Sub entity is flattened
                    // Add entity type field 'set' function with 'Builder' param
                    AddBuilderParamSetterMethod(
                        objectBuilderClassBuilder,
                        isEntityTypeObjectBuilderClass,
                        fieldFunctionName,
                        fullName,
                        builderTypeName,
                        objBuilderClassName,
                        internalBuilderVarName,
                        isFlattened,
                        isFieldMandatory,
                        isSubfield,
                        validatorSubFieldName);

                    if (numberOfDimensions > 0)
                    {
                        // Add 'set' function with 'array' param
                        AddBuilderArrayParamSetterMethod(
                            objectBuilderClassBuilder,
                            fieldFunctionName,
                            builderTypeName);

                        // Add 'set' function with 'List' param
                        AddBuilderListParamSetterMethod(
                            objectBuilderClassBuilder,
                            isEntityTypeObjectBuilderClass,
                            fieldFunctionName,
                            fullName,
                            builderTypeName,
                            objBuilderClassName,
                            internalBuilderVarName,
                            isFlattened,
                            isFieldMandatory,
                            isSubfield,
                            validatorSubFieldName);
                    }
                    // Add 'clear' field method body
                    clearFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(
                         new StringBuilder("_schemaObjectBuilder.ClearField(")
                            .Append(SchemaGeneratorHelper.CLASS_NAME)
                            .Append(".")
                            .Append(fullName)
                            .Append(")")
                            .ToString()
                        )
                    );

                    if (isFieldMandatory && isSubfield)
                    {
                        // Add instance variable for checking if subField is set
                        AddValidateField(objectBuilderClassBuilder, validatorSubFieldName);

                        // Note that mandatory field is cleared
                        MarkPropertyIsCleared(clearFieldMethodBuilder, validatorSubFieldName);

                        // add field to validate method
                        CheckFieldsInValidateMethod(
                            validateFunctionBuilder,
                            parentFieldName,
                            propertyName,
                            validatorSubFieldName);
                    }
                }
                else
                {
                    // Sub entity is json encoded
                    if (isParentFieldFlattened)
                    {
                        // parent is flattened, but this sub entity is not
                        buildFunctionBuilder = new()
                        {
                            Name = "Build",
                            Attributes = MemberAttributes.Assembly | MemberAttributes.Final
                        };

                        CodeParameterDeclarationExpression buildMethodParam = new(new CodeTypeReference("IJsonBuilder"), "jsonBuilder");
                        buildFunctionBuilder.Parameters.Add(buildMethodParam);
                        buildFunctionBuilder.Statements.Add(new CodeSnippetExpression("jsonBuilder.WriteStartObject()"));

                        // Add entity type property 'set' function 'Builder' param
                        AddBuilderParamSetterMethod(
                            objectBuilderClassBuilder,
                            isEntityTypeObjectBuilderClass,
                            fieldFunctionName,
                            fullName,
                            builderTypeName,
                            objBuilderClassName,
                            internalBuilderVarName,
                            isFlattened,
                            isFieldMandatory,
                            isSubfield,
                            validatorSubFieldName);

                        if (isFieldMultiValued)
                        {
                            // Add entity type property 'set' function with 'array' param
                            AddBuilderArrayParamSetterMethod(
                                objectBuilderClassBuilder,
                                fieldFunctionName,
                                builderTypeName);

                            // Add entity type property 'set' function with 'List' param
                            AddBuilderListParamSetterMethod(
                                objectBuilderClassBuilder,
                                isEntityTypeObjectBuilderClass,
                                fieldFunctionName,
                                fullName,
                                builderTypeName,
                                objBuilderClassName,
                                internalBuilderVarName,
                                isFlattened,
                                isFieldMandatory,
                                isSubfield,
                                validatorSubFieldName);
                        }
                        // Add 'clear' field method body
                        clearFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(
                                new StringBuilder("_schemaObjectBuilder.ClearField(")
                                .Append(SchemaGeneratorHelper.CLASS_NAME)
                                .Append(".")
                                .Append(fullName)
                                .Append(")")
                                .ToString()
                            )
                        );
                    }
                    else
                    {
                        // parent is json encoded, this sub entity is also json encoded

                        var intFieldType = isFieldMultiValued
                            ? new CodeTypeReference("List<" + objBuilderClassName + ">")
                            : new CodeTypeReference(objBuilderClassName);

                        CodeMemberField entityTypeField = new()
                        {
                            Name = internalVarName,
                            Attributes = MemberAttributes.Private,
                            Type = intFieldType
                        };

                        objectBuilderClassBuilder.Members.Add(entityTypeField);

                        // Add entity type property 'set' function 'Builder' param
                        AddNestedObjectBuilderParamSetterMethod(
                            objectBuilderClassBuilder,
                            fieldFunctionName,
                            internalVarName,
                            builderTypeName,
                            objBuilderClassName,
                            internalBuilderVarName,
                            isFlattened);

                        if (isFieldMultiValued)
                        {
                            // Add entity type property 'set' function with 'array' param
                            AddBuilderArrayParamSetterMethod(
                            objectBuilderClassBuilder,
                            fieldFunctionName,
                            builderTypeName);

                            // Add entity type property 'set' function with 'List' param
                            AddNestedObjectBuilderListParamSetterMethod(
                                objectBuilderClassBuilder,
                                fieldFunctionName,
                                internalVarName,
                                builderTypeName,
                                objBuilderClassName,
                                internalBuilderVarName,
                                isFlattened);
                        }
                        // Add 'clear' field method body
                        clearFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(internalVarName + " = null"));
                    }

                    // Write Json field
                    WriteJsonFieldsInBuildMethod(
                        buildFunctionBuilder,
                        fieldTypeValue,
                        isFieldMandatory,
                        isFieldMultiValued,
                        parentFieldName,
                        propertyName,
                        internalVarName,
                        objBuilderClassName);
                }
            }

            // Add an object builder class for entity type property (recursively creates SchemaObjectBuilder)
            AddEntityTypeObjectBuilderClass(
                objectBuilderClassBuilder,
                objBuilderClassName,
                buildFunctionBuilder,
                validateFunctionBuilder,
                subentityDef,
                newPath,
                fullName,
                isFlattened);

            if (isFieldMandatory && !isEntityTypeObjectBuilderClass)
            {
                // Note that mandatory entity-type field of main schema is cleared
                MarkPropertyIsCleared(clearFieldMethodBuilder, SchemaGeneratorHelper.ToValidatorFieldName(propertyName));
            }
            // Add clear field method
            objectBuilderClassBuilder.Members.Add(clearFieldMethodBuilder);
        }

        private void AddNestedObjectBuilderParamSetterMethod(
           CodeTypeDeclaration objectBuilderClassBuilder,
           string fieldFunctionName,
           string internalVarName,
           string builderTypeName,
           string objBuilderClassName,
           string internalBuilderVarName,
           bool isFlattened
        )
        {
            CodeParameterDeclarationExpression builderParamName = new(builderTypeName, "director");
            CodeMemberMethod setBuilderFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setBuilderFieldValue.Parameters.Add(builderParamName);

            if (isFlattened)
            {
                setBuilderFieldValue.Statements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder(objBuilderClassName)
                        .Append(" ")
                        .Append(internalBuilderVarName)
                        .Append(" = new ")
                        .Append(objBuilderClassName)
                        .Append("(this._schemaObjectBuilder)")
                        .ToString()
                    )
                );
            }
            else
            {
                setBuilderFieldValue.Statements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder(objBuilderClassName)
                        .Append(" ")
                        .Append(internalBuilderVarName)
                        .Append(" = new ")
                        .Append(objBuilderClassName)
                        .Append("()")
                        .ToString()
                    )
                );
            }
            setBuilderFieldValue.Statements.Add(new CodeSnippetExpression(
                new StringBuilder("director.Invoke(").Append(internalBuilderVarName).Append(")").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetExpression(
                new StringBuilder(internalVarName).Append(" = new List<").Append(objBuilderClassName).Append(">()").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetExpression(
                new StringBuilder(internalVarName).Append(".Add(").Append(internalBuilderVarName).Append(")").ToString()));

            objectBuilderClassBuilder.Members.Add(setBuilderFieldValue);
        }

        private void AddNestedObjectBuilderListParamSetterMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string fieldFunctionName,
            string internalVarName,
            string builderTypeName,
            string objBuilderClassName,
            string internalBuilderVarName,
            bool isFlattened)
        {
            CodeParameterDeclarationExpression streamParamFieldName =
                new(new CodeTypeReference("List<" + builderTypeName + ">"), "directors");
            CodeMemberMethod setStreamFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setStreamFieldValue.Parameters.Add(streamParamFieldName);

            setStreamFieldValue.Statements.Add(
                    new CodeSnippetStatement(internalVarName + " = directors.Select(director => {"));
            if (isFlattened)
            {
                setStreamFieldValue.Statements.Add(
                    new CodeSnippetStatement(
                        new StringBuilder(objBuilderClassName)
                        .Append(" ")
                        .Append(internalBuilderVarName)
                        .Append(" = new ")
                        .Append(objBuilderClassName)
                        .Append("(this._schemaObjectBuilder);")
                        .ToString()
                    )
                );
            }
            else
            {
                setStreamFieldValue.Statements.Add(
                    new CodeSnippetStatement(
                        new StringBuilder(objBuilderClassName)
                        .Append(" ")
                        .Append(internalBuilderVarName)
                        .Append(" = new ")
                        .Append(objBuilderClassName)
                        .Append("();")
                        .ToString()
                    )
                );
            }

            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  director.Invoke(").Append(internalBuilderVarName).Append(");").ToString()));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  return ").Append(internalBuilderVarName).Append(";").ToString()));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement("}).ToList();"));

            objectBuilderClassBuilder.Members.Add(setStreamFieldValue);
        }

        private void AddEntityTypeObjectBuilderClass(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string objBuilderClassName,
            CodeMemberMethod buildFunctionBuilder,
            CodeMemberMethod validateFunctionBuilder,
            JsonNode subentityDef,
            string[] newPath,
            string fullName,
            bool isFlattened
        )
        {
            if (isFlattened)
            {
                CodeTypeDeclaration fieldObjectBuilderClassBuilder
                    = CreateSchemaObjectBuilderSource(
                        objBuilderClassName,
                        true,
                        buildFunctionBuilder,
                        validateFunctionBuilder,
                        subentityDef,
                        newPath,
                        fullName,
                        true,
                        false);

                objectBuilderClassBuilder.Members.Add(fieldObjectBuilderClassBuilder);
            }
            else
            {
                // This class will have instance variables for each property and a 'build' function to write json values
                CodeTypeDeclaration fieldObjectBuilderClassBuilder = new(objBuilderClassName)
                {
                    TypeAttributes = TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.Sealed
                };
                CodeConstructor defaultCtor = new()
                {
                    Attributes = MemberAttributes.Assembly
                };
                fieldObjectBuilderClassBuilder.Members.Add(defaultCtor);

                // Create a 'build' method
                CodeMemberMethod parentBuilder = buildFunctionBuilder;
                buildFunctionBuilder = new()
                {
                    Name = "Build",
                    Attributes = MemberAttributes.Assembly | MemberAttributes.Final
                };
                CodeParameterDeclarationExpression buildMethodParam = new(new CodeTypeReference("IJsonBuilder"), "jsonBuilder");
                buildFunctionBuilder.Parameters.Add(buildMethodParam);
                buildFunctionBuilder.Statements.Add(new CodeSnippetExpression("jsonBuilder.WriteStartObject()"));

                // Add all the sub-fields of this entity type property
                AddPropertySetters(
                    fieldObjectBuilderClassBuilder,
                    true,
                    buildFunctionBuilder,
                    validateFunctionBuilder,
                    subentityDef,
                    newPath,
                    fullName,
                    false);

                buildFunctionBuilder.Statements.Add(new CodeSnippetExpression("jsonBuilder.WriteEndObject()"));
                fieldObjectBuilderClassBuilder.Members.Add(buildFunctionBuilder);
                if (parentBuilder != null)
                {
                    buildFunctionBuilder = parentBuilder;
                }
                objectBuilderClassBuilder.Members.Add(fieldObjectBuilderClassBuilder);
            }
        }

        private void AddMultiDimensionalEntityTypeProperty(
            CodeTypeDeclaration objectBuilderClassBuilder,
            bool isEntityTypeObjectBuilderClass,
            string objBuilderClassName,
            string internalBuilderVarName,
            string fieldFunctionName,
            string fullName,
            string internalVarName,
            int numberOfDimensions,
            bool isFlattened,
            bool isFieldMandatory,
            bool isSubField,
            string validatorSubFieldName
        )
        {
            // Multi-dimensional field
            // Add a list object builder class for property
            string suffix = "ObjectBuilder";
            string listName = "";
            for (int i = 0; i < numberOfDimensions - 1; i++)
            {
                listName += "List";
                AddListBuilderClass(
                    objectBuilderClassBuilder,
                    objBuilderClassName,
                    fieldFunctionName + listName + suffix,
                    internalVarName,
                    isFlattened);
            }
            string listObjBuilderClassName = fieldFunctionName + listName + suffix;
            string listBuilderTypeName = "Action<" + listObjBuilderClassName + ">";

            // Add 'set' function with 'Builder' param
            AddBuilderParamSetterMethod(
                objectBuilderClassBuilder,
                isEntityTypeObjectBuilderClass,
                fieldFunctionName,
                fullName,
                listBuilderTypeName,
                listObjBuilderClassName,
                internalBuilderVarName,
                isFlattened,
                isFieldMandatory,
                isSubField,
                validatorSubFieldName);

            // Add 'set' function with 'array' param
            AddBuilderArrayParamSetterMethod(
                objectBuilderClassBuilder,
                fieldFunctionName,
                listBuilderTypeName);

            // Add 'set' function with 'List' param
            AddBuilderListParamSetterMethod(
                objectBuilderClassBuilder,
                isEntityTypeObjectBuilderClass,
                fieldFunctionName,
                fullName,
                listBuilderTypeName,
                listObjBuilderClassName,
                internalBuilderVarName,
                isFlattened,
                isFieldMandatory,
                isSubField,
                validatorSubFieldName);
        }

        private void AddBuilderParamSetterMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            bool isEntityTypeObjectBuilderClass,
            string fieldFunctionName,
            string propertyName,
            string builderTypeName,
            string objBuilderClassName,
            string internalBuilderVarName,
            bool isFlattened,
            bool isFieldMandatory,
            bool isSubField,
            string validatorSubFieldName
        )
        {
            CodeParameterDeclarationExpression builderParamName = new(new CodeTypeReference(builderTypeName), "director");
            CodeMemberMethod setBuilderFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setBuilderFieldValue.Parameters.Add(builderParamName);

            if (isFlattened)
            {
                SetFlattenedFieldValue(
                    setBuilderFieldValue,
                    propertyName,
                    objBuilderClassName,
                    internalBuilderVarName,
                    isFieldMandatory,
                    isSubField,
                    validatorSubFieldName);
            }
            else
            {
                SetJsonFieldValue(setBuilderFieldValue, propertyName, objBuilderClassName, internalBuilderVarName);
            }
            if (isFieldMandatory && !isEntityTypeObjectBuilderClass)
            {
                MarkPropertyIsSet(setBuilderFieldValue, SchemaGeneratorHelper.ToValidatorFieldName(propertyName));
            }
            objectBuilderClassBuilder.Members.Add(setBuilderFieldValue);

        }

        private void AddBuilderArrayParamSetterMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string fieldFunctionName,
            string builderTypeName
        )
        {
            CodeParameterDeclarationExpression arrayParamFieldName = new(builderTypeName + "[]", "directors");
            arrayParamFieldName.CustomAttributes.Add(new CodeAttributeDeclaration(new CodeTypeReference(typeof(ParamArrayAttribute))));

            CodeMemberMethod setStreamFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setStreamFieldValue.Parameters.Add(arrayParamFieldName);

            setStreamFieldValue.Statements.Add(new CodeSnippetStatement("Set" + fieldFunctionName + "(directors.ToList());"));

            objectBuilderClassBuilder.Members.Add(setStreamFieldValue);
        }

        private void AddBuilderListParamSetterMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            bool isEntityTypeObjectBuilderClass,
            string fieldFunctionName,
            string propertyName,
            string builderTypeName,
            string objBuilderClassName,
            string internalBuilderVarName,
            bool isFlattened,
            bool isFieldMandatory,
            bool isSubField,
            string validatorSubFieldName
        )
        {
            CodeParameterDeclarationExpression streamParamFieldName =
                new(new CodeTypeReference("IEnumerable<" + builderTypeName + ">"), "directors");
            CodeMemberMethod setStreamFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setStreamFieldValue.Parameters.Add(streamParamFieldName);

            if (isFlattened)
            {
                SetFlattenedFieldValueStream(
                    setStreamFieldValue,
                    propertyName,
                    objBuilderClassName,
                    internalBuilderVarName,
                    isFieldMandatory,
                    isSubField,
                    validatorSubFieldName);
            }
            else
            {
                SetJsonFieldValueStream(setStreamFieldValue, propertyName, objBuilderClassName, internalBuilderVarName);
            }
            if (isFieldMandatory && !isEntityTypeObjectBuilderClass)
            {
                MarkPropertyIsSet(setStreamFieldValue, SchemaGeneratorHelper.ToValidatorFieldName(propertyName));
            }
            objectBuilderClassBuilder.Members.Add(setStreamFieldValue);
        }

        private void SetJsonFieldValue(
            CodeMemberMethod setBuilderFieldValue,
            string propertyName,
            string objBuilderClassName,
            string internalBuilderVarName
        )
        {
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    new StringBuilder(objBuilderClassName)
                    .Append(" ")
                    .Append(internalBuilderVarName)
                    .Append(" = new ")
                    .Append(objBuilderClassName)
                    .Append("();")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("director.Invoke(").Append(internalBuilderVarName).Append(");").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("_schemaObjectBuilder.SetJsonFieldValue("));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  ")
                .Append(SchemaGeneratorHelper.CLASS_NAME)
                .Append(".")
                .Append(propertyName)
                .Append(",jsonBuilder => {")
                .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  ").Append(internalBuilderVarName).Append(".Build(jsonBuilder);").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("}"));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(");"));
        }

        private void SetFlattenedFieldValue(
            CodeMemberMethod setBuilderFieldValue,
            string propertyName,
            string objBuilderClassName,
            string internalBuilderVarName,
            bool isFieldMandatory,
            bool isSubField,
            string validatorSubFieldName
        )
        {
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    new StringBuilder("_schemaObjectBuilder.SetFlattenedFieldValue(")
                    .Append(SchemaGeneratorHelper.CLASS_NAME)
                    .Append(".")
                    .Append(propertyName)
                    .Append(", sBuilder => {")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    new StringBuilder("    ")
                    .Append(objBuilderClassName)
                    .Append(" ")
                    .Append(internalBuilderVarName)
                    .Append(" = new ")
                    .Append(objBuilderClassName)
                    .Append("(sBuilder);")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    director.Invoke(").Append(internalBuilderVarName).Append(");").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    ").Append(internalBuilderVarName).Append(".Validate();").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("});"));
            if (isFieldMandatory && isSubField)
            {
                MarkPropertyIsSet(setBuilderFieldValue, validatorSubFieldName);
            }
        }

        private void SetJsonFieldValueStream(
            CodeMemberMethod setBuilderFieldValue,
            string propertyName,
            string objBuilderClassName,
            string internalBuilderVarName
        )
        {
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement("_schemaObjectBuilder.SetJsonFieldValue("));
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    new StringBuilder(SchemaGeneratorHelper.CLASS_NAME)
                    .Append(".")
                    .Append(propertyName)
                    .Append(",")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    new StringBuilder("  directors.Select<Action<")
                    .Append(objBuilderClassName)
                    .Append(">, Action<IJsonBuilder>>(director => {")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    new StringBuilder(objBuilderClassName)
                    .Append(" ")
                    .Append(internalBuilderVarName)
                    .Append(" = new ")
                    .Append(objBuilderClassName)
                    .Append("();")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("director.Invoke(").Append(internalBuilderVarName).Append(");").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("  return jsonBuilder => {"));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  ").Append(internalBuilderVarName).Append(".Build(jsonBuilder);").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("};"));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("}));"));
        }

        private void SetFlattenedFieldValueStream(
            CodeMemberMethod setBuilderFieldValue,
            string propertyName,
            string objBuilderClassName,
            string internalBuilderVarName,
            bool isFieldMandatory,
            bool isSubField,
            string validatorSubFieldName
        )
        {
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                    new StringBuilder("_schemaObjectBuilder.SetFlattenedFieldValue(")
                    .Append(SchemaGeneratorHelper.CLASS_NAME)
                    .Append(".")
                    .Append(propertyName)
                    .Append(",")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                    new StringBuilder("    directors.Select<Action<")
                    .Append(objBuilderClassName)
                    .Append(">, Action<ISchemaObjectBuilder>>(director => {")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("    return sBuilder => {"));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                    new StringBuilder("    ")
                    .Append(objBuilderClassName)
                    .Append(" ")
                    .Append(internalBuilderVarName)
                    .Append(" = new ")
                    .Append(objBuilderClassName)
                    .Append("(sBuilder);")
                    .ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    director.Invoke(").Append(internalBuilderVarName).Append(");").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    ").Append(internalBuilderVarName).Append(".Validate();").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("    };"));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("}));"));
            if (isFieldMandatory && isSubField)
            {
                MarkPropertyIsSet(setBuilderFieldValue, validatorSubFieldName);
            }
        }

        private void AddListBuilderClass(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string objBuilderClassName,
            string listObjBuilderClassName,
            string internalVarName,
            bool isFlattened
        )
        {
            CodeTypeDeclaration fieldListObjectBuilderClassBuiler = new(listObjBuilderClassName)
            {
                TypeAttributes = TypeAttributes.Public | TypeAttributes.Class
            };

            // flattened does not need 'build' function and instance/state variables
            if (isFlattened)
            {
                AddSchemaObjectBuilderFieldAndCtor(fieldListObjectBuilderClassBuiler, false);

                // Add 'set' function with 'Builder' param
                AddFieldListObjectBuilderBuilderParamSetterMethod(
                    fieldListObjectBuilderClassBuiler, objBuilderClassName, internalVarName);

                // Add 'set' function with array of 'Builder' param
                AddFieldListObjectBuilderBuilderArrayParamSetterMethod(
                    fieldListObjectBuilderClassBuiler, objBuilderClassName);

                // Add 'set' function with 'List' param
                AddFieldListObjectBuilderListParamSetterMethod(
                    fieldListObjectBuilderClassBuiler, objBuilderClassName, internalVarName);

                // Add 'clear' field method
                AddFieldListObjectBuilderClearMethod(fieldListObjectBuilderClassBuiler);

                // Add 'validate' field method
                AddFieldListObjectBuilderValidateMethod(fieldListObjectBuilderClassBuiler);
            }
            else
            {
                // Json encoded
                CodeConstructor defaultCtor = new()
                {
                    Attributes = MemberAttributes.Assembly | MemberAttributes.Final
                };
                fieldListObjectBuilderClassBuiler.Members.Add(defaultCtor);

                // Add instance variable for list of field object builders
                string listName = internalVarName + "Builders";

                CodeMemberField fieldObjBuilderList = new()
                {
                    Name = listName,
                    Attributes = MemberAttributes.Private,
                    Type = new CodeTypeReference("List<" + objBuilderClassName + ">")
                };

                fieldListObjectBuilderClassBuiler.Members.Add(fieldObjBuilderList);

                // Add 'set' function with 'Builder' param
                AddFieldListObjectBuilderBuilderParamSetterMethod(
                    fieldListObjectBuilderClassBuiler, objBuilderClassName, internalVarName, listName);

                // Add 'set' function with array of 'Builder' param
                AddFieldListObjectBuilderBuilderArrayParamSetterMethod(
                    fieldListObjectBuilderClassBuiler, objBuilderClassName);

                // Add 'set' function with 'List' param
                AddFieldListObjectBuilderListParamSetterMethod(
                    fieldListObjectBuilderClassBuiler, objBuilderClassName, internalVarName, listName);

                // Add 'clear' field method
                AddFieldListObjectBuilderClearMethod(fieldListObjectBuilderClassBuiler, listName);

                // Add 'build' method
                AddFieldListObjectBuilderBuildMethod(fieldListObjectBuilderClassBuiler, objBuilderClassName, listName);
            }

            objectBuilderClassBuilder.Members.Add(fieldListObjectBuilderClassBuiler);
        }

        private void AddFieldListObjectBuilderBuilderParamSetterMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string objBuilderClassName,
            string fieldName
        )
        {
            CodeParameterDeclarationExpression builderParamName =
                new(new CodeTypeReference("Action<" + objBuilderClassName + ">"), "director");

            string varName = fieldName + "ObjectBuilder";
            CodeMemberMethod setBuilderFieldValue = new()
            {
                Name = "Set",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            setBuilderFieldValue.Parameters.Add(builderParamName);

            setBuilderFieldValue.Statements.Add(
                new CodeSnippetStatement("this._schemaObjectBuilder.SetFlattenedFieldValue(null, builder => {"));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    ")
                .Append(objBuilderClassName)
                .Append(" ")
                .Append(varName)
                .Append(" = new ")
                .Append(objBuilderClassName)
                .Append("(builder);")
                .ToString()
                )
            );
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    director.Invoke(").Append(varName).Append(");").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    ").Append(varName).Append(".Validate();").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement("});"));

            listObjectBuilderClassBuiler.Members.Add(setBuilderFieldValue);
        }

        private void AddFieldListObjectBuilderBuilderArrayParamSetterMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string objBuilderClassName
        )
        {
            CodeParameterDeclarationExpression arrayParamFieldName = new("Action < " + objBuilderClassName + " >[]", "directors");
            arrayParamFieldName.CustomAttributes.Add(new CodeAttributeDeclaration(new CodeTypeReference(typeof(ParamArrayAttribute))));

            CodeMemberMethod setStreamFieldValue = new()
            {
                Name = "Set",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            setStreamFieldValue.Parameters.Add(arrayParamFieldName);

            setStreamFieldValue.Statements.Add(new CodeSnippetStatement("Set(directors.ToList());"));

            listObjectBuilderClassBuiler.Members.Add(setStreamFieldValue);
        }

        private void AddFieldListObjectBuilderListParamSetterMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string objBuilderClassName,
            string fieldName
        )
        {
            CodeParameterDeclarationExpression streamParamFieldName = new(
                new CodeTypeReference("IEnumerable<Action<" + objBuilderClassName + ">>"), "directors");

            string varName = fieldName + "ObjectBuilder";
            CodeMemberMethod setStreamFieldValue = new()
            {
                Name = "Set",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            setStreamFieldValue.Parameters.Add(streamParamFieldName);


            setStreamFieldValue.Statements.Add(
                new CodeSnippetStatement(
                    "this._schemaObjectBuilder.SetFlattenedFieldValue(null, directors.Select<Action<"
                    + objBuilderClassName
                    + ">, Action<ISchemaObjectBuilder>>(director => builder => {"));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    ")
                .Append(objBuilderClassName)
                .Append(" ")
                .Append(varName)
                .Append(" = new ")
                .Append(objBuilderClassName)
                .Append("(builder);")
                .ToString()
                )
            );
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    director.Invoke(").Append(varName).Append(");").ToString()));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("    ").Append(varName).Append(".Validate();").ToString()));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement("}));"));

            listObjectBuilderClassBuiler.Members.Add(setStreamFieldValue);
        }

        private void AddFieldListObjectBuilderClearMethod(CodeTypeDeclaration listObjectBuilderClassBuiler)
        {
            CodeMemberMethod clearFieldMethod = new()
            {
                Name = "Clear",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            clearFieldMethod.Statements.Add(new CodeSnippetExpression("this._schemaObjectBuilder.ClearField(null)"));
            listObjectBuilderClassBuiler.Members.Add(clearFieldMethod);
        }

        private void AddFieldListObjectBuilderValidateMethod(CodeTypeDeclaration listObjectBuilderClassBuiler)
        {
            CodeMemberMethod validateMethod = new()
            {
                Name = "Validate",
                Attributes = MemberAttributes.Assembly | MemberAttributes.Final
            };

            listObjectBuilderClassBuiler.Members.Add(validateMethod);
        }

        private void AddFieldListObjectBuilderBuilderParamSetterMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string objBuilderClassName,
            string fieldName,
            string listName
        )
        {
            CodeParameterDeclarationExpression builderParamName =
                new(new CodeTypeReference("Action<" + objBuilderClassName + ">"), "director");

            string varName = fieldName + "ObjectBuilder";
            CodeMemberMethod setBuilderFieldValue = new()
            {
                Name = "Set",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            setBuilderFieldValue.Parameters.Add(builderParamName);

            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder(objBuilderClassName + " ")
                .Append(varName)
                .Append(" = new ")
                .Append(objBuilderClassName)
                .Append("();")
                .ToString()
                )
            );
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("director.Invoke(").Append(varName).Append(");").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder(listName).Append(" = new List<").Append(objBuilderClassName).Append(">();").ToString()));
            setBuilderFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder(listName).Append(".Add(").Append(varName).Append(");").ToString()));

            listObjectBuilderClassBuiler.Members.Add(setBuilderFieldValue);
        }

        private void AddFieldListObjectBuilderListParamSetterMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string objBuilderClassName,
            string fieldName,
            string listName
        )
        {
            CodeParameterDeclarationExpression streamParamFieldName = new(
                new CodeTypeReference("IEnumerable<Action<" + objBuilderClassName + ">>"), "directors");

            string varName = fieldName + "ObjectBuilder";
            CodeMemberMethod setStreamFieldValue = new()
            {
                Name = "Set",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setStreamFieldValue.Parameters.Add(streamParamFieldName);

            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(listName + " = directors.Select(director => {"));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  ")
                .Append(objBuilderClassName)
                .Append(" ")
                .Append(varName)
                .Append(" = new ")
                .Append(objBuilderClassName)
                .Append("();")
                .ToString()
                )
            );
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  director.Invoke(").Append(varName).Append(");").ToString()));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement(
                new StringBuilder("  return ").Append(varName).Append(";").ToString()));
            setStreamFieldValue.Statements.Add(new CodeSnippetStatement("}).ToList();"));

            listObjectBuilderClassBuiler.Members.Add(setStreamFieldValue);
        }

        private void AddFieldListObjectBuilderClearMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string listName
        )
        {
            CodeMemberMethod clearListMethod = new()
            {
                Name = "Clear",
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            clearListMethod.Statements.Add(new CodeSnippetExpression(listName + " = null"));
            listObjectBuilderClassBuiler.Members.Add(clearListMethod);
        }

        private void AddFieldListObjectBuilderBuildMethod(
            CodeTypeDeclaration listObjectBuilderClassBuiler,
            string objBuilderClassName,
            string listName
        )
        {
            CodeMemberMethod buildFunctionBuilder = new()
            {
                Name = "Build",
                Attributes = MemberAttributes.Assembly | MemberAttributes.Final
            };
            CodeParameterDeclarationExpression buildMethodParam = new(new CodeTypeReference("IJsonBuilder"), "jsonBuilder");
            buildFunctionBuilder.Parameters.Add(buildMethodParam);

            buildFunctionBuilder.Statements.Add(new CodeSnippetStatement("jsonBuilder.WriteStartArray();"));

            CodeConditionStatement ifStatement = new()
            {
                Condition = new CodeSnippetExpression(listName + " != null")
            };
            ifStatement.TrueStatements.Add(new CodeSnippetStatement(
                new StringBuilder("foreach (")
                .Append(objBuilderClassName)
                .Append(" value in ")
                .Append(listName)
                .Append(")")
                .ToString()
                )
            );
            ifStatement.TrueStatements.Add(new CodeSnippetStatement("{"));
            ifStatement.TrueStatements.Add(new CodeSnippetStatement("  value.Build(jsonBuilder);"));
            ifStatement.TrueStatements.Add(new CodeSnippetStatement("}"));
            buildFunctionBuilder.Statements.Add(ifStatement);
            buildFunctionBuilder.Statements.Add(new CodeSnippetStatement("jsonBuilder.WriteEndArray();"));

            listObjectBuilderClassBuiler.Members.Add(buildFunctionBuilder);
        }

        private void AddNonEntityTypePropertySetterMethods(
            CodeTypeDeclaration objectBuilderClassBuilder,
            CodeMemberMethod buildFunctionBuilder,
            CodeMemberMethod validateFunctionBuilder,
            string fieldFunctionName,
            string fieldTypeValue,
            bool isFieldMandatory,
            bool isFieldMultiValued,
            bool isSubfield,
            string propertyName,
            string parentFieldName,
            bool isParentFieldFlattened
        )
        {
            Type fieldType = PROPERTY_TYPES_LOOKUP[fieldTypeValue];
            string fieldTypeMethodName = PROPERTY_TYPES_METHOD_LOOKUP[fieldTypeValue];
            CodeParameterDeclarationExpression paramSingleFieldValue = new(new CodeTypeReference(fieldType), "value");

            string subFieldName = SchemaGeneratorHelper.ToFieldNameCase(propertyName);
            string validatorSubFieldName = SchemaGeneratorHelper.ToValidatorFieldName(propertyName);

            // Add setter variations for multi-valued field
            if (isFieldMultiValued)
            {
                // Set 'array' value
                AddArrayParamSetterMethod(
                    objectBuilderClassBuilder,
                    fieldFunctionName,
                    propertyName,
                    subFieldName,
                    fieldTypeValue,
                    isSubfield,
                    parentFieldName,
                    isParentFieldFlattened,
                    isFieldMandatory,
                    validatorSubFieldName);

                // Set 'List' value
                AddListParamSetterMethod(
                    objectBuilderClassBuilder,
                    fieldFunctionName,
                    propertyName,
                    subFieldName,
                    fieldTypeValue,
                    isSubfield,
                    parentFieldName,
                    isParentFieldFlattened,
                    isFieldMandatory,
                    validatorSubFieldName);

                // Add 'single' value
                AddSingleValueAddMethod(
                    objectBuilderClassBuilder,
                    paramSingleFieldValue,
                    fieldFunctionName,
                    propertyName,
                    subFieldName,
                    fieldTypeValue,
                    isSubfield,
                    parentFieldName,
                    isParentFieldFlattened,
                    isFieldMandatory,
                    validatorSubFieldName);
            }

            CodeMemberMethod setSingleFieldValueMethodBuilder = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setSingleFieldValueMethodBuilder.Parameters.Add(paramSingleFieldValue);

            CodeMemberMethod clearFieldMethodBuilder = new()
            {
                Name = "Clear" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };

            if (isSubfield)
            {
                // This is a non entity type property of an entity type property
                if (isParentFieldFlattened)
                {
                    clearFieldMethodBuilder.Statements.Add(
                        new CodeSnippetExpression(
                            new StringBuilder("_schemaObjectBuilder.ClearField(")
                            .Append(SchemaGeneratorHelper.CLASS_NAME)
                            .Append(".")
                            .Append(parentFieldName)
                            .Append(".")
                            .Append(propertyName)
                            .Append(")")
                            .ToString()
                        )
                    );

                    setSingleFieldValueMethodBuilder.Statements.Add(
                        new CodeSnippetExpression(
                            new StringBuilder("_schemaObjectBuilder.Set")
                            .Append(fieldTypeMethodName)
                            .Append("FieldValue(")
                            .Append(SchemaGeneratorHelper.CLASS_NAME)
                            .Append(".")
                            .Append(parentFieldName)
                            .Append(".")
                            .Append(propertyName)
                            .Append(", value)")
                            .ToString()
                         )
                    );

                    if (isFieldMandatory)
                    {
                        // Add instance variable for checking if subField is set
                        AddValidateField(objectBuilderClassBuilder, validatorSubFieldName);

                        // Note that mandatory field is set
                        MarkPropertyIsSet(setSingleFieldValueMethodBuilder, validatorSubFieldName);
                        // Note that mandatory field is cleared
                        MarkPropertyIsCleared(clearFieldMethodBuilder, validatorSubFieldName);

                        // add field to validate method
                        CheckFieldsInValidateMethod(
                            validateFunctionBuilder,
                            parentFieldName,
                            propertyName,
                            validatorSubFieldName);
                    }
                }
                else
                {
                    // Add instance variable for subField
                    CodeTypeReference fldType = isFieldMultiValued
                        ? new CodeTypeReference("List<" + PROPERTY_NULLABLE_TYPES_LOOKUP[fieldTypeValue] + ">")
                        : new CodeTypeReference(PROPERTY_NULLABLE_TYPES_LOOKUP[fieldTypeValue]);
                    CodeMemberField field = new()
                    {
                        Name = subFieldName,
                        Attributes = MemberAttributes.Private,
                        Type = fldType
                    };
                    objectBuilderClassBuilder.Members.Add(field);

                    // Add 'clear' function body
                    clearFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(subFieldName + " = null"));

                    // write Json fields
                    WriteJsonFieldsInBuildMethod(
                        buildFunctionBuilder,
                        fieldTypeValue,
                        isFieldMandatory,
                        isFieldMultiValued,
                        parentFieldName,
                        propertyName,
                        subFieldName,
                        null);

                    // Add setters for multi-valued subfield
                    if (isFieldMultiValued)
                    {
                        // Add set single value function body
                        setSingleFieldValueMethodBuilder.Statements.Add(
                            new CodeSnippetExpression(
                                new StringBuilder("this.")
                                .Append(subFieldName)
                                .Append(" = new List<")
                                .Append(fieldType)
                                .Append(">()")
                                .ToString()
                            )
                        );
                        setSingleFieldValueMethodBuilder.Statements.Add(new CodeSnippetExpression(
                            new StringBuilder("this.").Append(subFieldName).Append(".Add(value)").ToString()));
                    }
                    else
                    {
                        setSingleFieldValueMethodBuilder.Statements.Add(new CodeSnippetExpression(
                            new StringBuilder("this.").Append(subFieldName).Append(" = value").ToString()));
                    }
                }
            }
            else
            {
                // This is a non entity type property in the main schema
                clearFieldMethodBuilder.Statements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("_schemaObjectBuilder.ClearField(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(propertyName)
                        .Append(")")
                        .ToString()
                    )
                );

                setSingleFieldValueMethodBuilder.Statements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("_schemaObjectBuilder.Set")
                        .Append(fieldTypeMethodName)
                        .Append("FieldValue(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(propertyName)
                        .Append(", value)")
                        .ToString()
                    )
                );

                if (isFieldMandatory)
                {
                    string validatorFieldName = SchemaGeneratorHelper.ToValidatorFieldName(propertyName);
                    MarkPropertyIsCleared(clearFieldMethodBuilder, validatorFieldName);
                    MarkPropertyIsSet(setSingleFieldValueMethodBuilder, validatorFieldName);
                }
            }

            // Add 'single value' setter method
            objectBuilderClassBuilder.Members.Add(setSingleFieldValueMethodBuilder);

            // Add 'clear' field method
            objectBuilderClassBuilder.Members.Add(clearFieldMethodBuilder);

        }

        private void WriteJsonFieldsInBuildMethod(
            CodeMemberMethod buildFunctionBuilder,
            string fieldTypeValue,
            bool isFieldMandatory,
            bool isFieldMultiValued,
            string parentFieldName,
            string propertyName,
            string subFieldName,
            string objBuilderClassName
        )
        {
            CodeSnippetExpression writeFieldNameExpn = new(
                new StringBuilder("jsonBuilder.WriteFieldName(")
                .Append(SchemaGeneratorHelper.CLASS_NAME)
                .Append(".")
                .Append(parentFieldName)
                .Append(".")
                .Append(propertyName)
                .Append(".FieldName)")
                .ToString()
            );

            List<CodeSnippetStatement> writeFieldValueStatements
                = GetWriteJsonValueStatements(
                    isFieldMultiValued,
                    objBuilderClassName,
                    fieldTypeValue,
                    subFieldName
                  );

            if (isFieldMandatory)
            {
                CodeConditionStatement ifStatement = new()
                {
                    Condition = new CodeSnippetExpression(subFieldName + " == null")
                };
                ifStatement.TrueStatements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("throw new ArgumentException(\"Mandatory field '")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(parentFieldName)
                        .Append(".")
                        .Append(propertyName)
                        .Append("' is not set\")")
                        .ToString()
                    ));
                ifStatement.FalseStatements.Add(writeFieldNameExpn);
                foreach (var stmt in writeFieldValueStatements)
                {
                    ifStatement.FalseStatements.Add(stmt);
                }
                buildFunctionBuilder.Statements.Add(ifStatement);
            }
            else
            {
                var nullCheckExpression = SchemaGeneratorHelper.IsPrimitiveNullableType(fieldTypeValue)
                    ? new CodeSnippetExpression(subFieldName + ".HasValue")
                    : new CodeSnippetExpression(subFieldName + " != null");
                CodeConditionStatement ifStatement = new()
                {
                    Condition = nullCheckExpression
                };
                ifStatement.TrueStatements.Add(writeFieldNameExpn);
                foreach (var stmt in writeFieldValueStatements)
                {
                    ifStatement.TrueStatements.Add(stmt);
                }
                buildFunctionBuilder.Statements.Add(ifStatement);
            }
        }

        private List<CodeSnippetStatement> GetWriteJsonValueStatements(
            bool isFieldMultiValued,
            string objBuilderClassName,
            string fieldTypeValue,
            string subFieldName
        )
        {
            List<CodeSnippetStatement> statements = new();
            if (isFieldMultiValued)
            {
                // Add 'build' function body
                statements.Add(new CodeSnippetStatement("jsonBuilder.WriteStartArray();"));

                if (objBuilderClassName == null)
                {
                    string fieldTypeMethodName = PROPERTY_TYPES_METHOD_LOOKUP[fieldTypeValue];
                    statements.Add(new CodeSnippetStatement(
                        new StringBuilder("foreach(")
                        .Append(fieldTypeMethodName)
                        .Append(" value in ")
                        .Append(subFieldName)
                        .Append(")")
                        .ToString()
                        )
                    );
                    statements.Add(new CodeSnippetStatement("{"));
                    statements.Add(new CodeSnippetStatement(
                        new StringBuilder("jsonBuilder.Write")
                        .Append(fieldTypeMethodName)
                        .Append("(value);")
                        .ToString()
                        )
                    );
                }
                else
                {
                    statements.Add(new CodeSnippetStatement(
                        new StringBuilder("foreach(")
                        .Append(objBuilderClassName)
                        .Append(" value in ")
                        .Append(subFieldName)
                        .Append(")")
                        .ToString()
                        )
                    );
                    statements.Add(new CodeSnippetStatement("{"));
                    statements.Add(new CodeSnippetStatement("value.Build(jsonBuilder);"));
                }
                statements.Add(new CodeSnippetStatement("}"));

                statements.Add(new CodeSnippetStatement("jsonBuilder.WriteEndArray();"));
            }
            else
            {
                if (objBuilderClassName == null)
                {
                    string fieldTypeMethodName = PROPERTY_TYPES_METHOD_LOOKUP[fieldTypeValue];
                    var subFieldValue = SchemaGeneratorHelper.IsPrimitiveNullableType(fieldTypeValue)
                        ? subFieldName + ".Value"
                        : subFieldName;
                    statements.Add(
                        new CodeSnippetStatement(
                            new StringBuilder("jsonBuilder.Write")
                            .Append(fieldTypeMethodName)
                            .Append("(")
                            .Append(subFieldValue)
                            .Append(");")
                            .ToString()
                        )
                    );
                }
                else
                {
                    statements.Add(new CodeSnippetStatement(new StringBuilder(subFieldName)
                        .Append("value.Build(jsonBuilder);")
                        .ToString()));
                }
            }
            return statements;
        }

        private void MarkPropertyIsSet(CodeMemberMethod setFieldMethodBuilder, string validatorFieldName)
        {
            setFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(validatorFieldName + " = true"));
        }

        private void MarkPropertyIsCleared(CodeMemberMethod clearFieldMethodBuilder, string validatorFieldName)
        {
            clearFieldMethodBuilder.Statements.Add(new CodeSnippetExpression(validatorFieldName + " = false"));
        }

        private void AddSingleValueAddMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            CodeParameterDeclarationExpression paramSingleFieldValue,
            string fieldFunctionName,
            string propertyName,
            string subFieldName,
            string fieldTypeValue,
            bool isSubfield,
            string parentFieldName,
            bool isParentFieldFlattened,
            bool isFieldMandatory,
            string validatorSubFieldName)
        {
            Type fieldType = PROPERTY_TYPES_LOOKUP[fieldTypeValue];
            string fieldTypeMethodName = PROPERTY_TYPES_METHOD_LOOKUP[fieldTypeValue];

            CodeMemberMethod addFieldValue = new()
            {
                Name = "Add" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            addFieldValue.Parameters.Add(paramSingleFieldValue);

            if (isSubfield)
            {
                if (isParentFieldFlattened)
                {
                    addFieldValue.Statements.Add(
                        new CodeSnippetExpression(
                            new StringBuilder("_schemaObjectBuilder.Add")
                            .Append(fieldTypeMethodName)
                            .Append("FieldValue(")
                            .Append(SchemaGeneratorHelper.CLASS_NAME)
                            .Append(".")
                            .Append(parentFieldName)
                            .Append(".")
                            .Append(propertyName)
                            .Append(", value)")
                            .ToString()
                        )
                    );
                    if (isFieldMandatory)
                    {
                        // Note mandatory field has been set
                        MarkPropertyIsSet(addFieldValue, validatorSubFieldName);
                    }
                }
                else
                {
                    CodeConditionStatement ifStatement = new()
                    {
                        Condition = new CodeSnippetExpression(subFieldName + " == null")
                    };
                    CodeAssignStatement assignmentStmt = new()
                    {
                        Left = new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), subFieldName),
                        Right = new CodeSnippetExpression(
                            new StringBuilder("new List<").Append(fieldType.Name).Append(">()").ToString())
                    };
                    ifStatement.TrueStatements.Add(assignmentStmt);

                    addFieldValue.Statements.Add(ifStatement);
                    addFieldValue.Statements.Add(
                        new CodeSnippetExpression(
                            new StringBuilder("this.")
                            .Append(subFieldName)
                            .Append(".Add(value)")
                            .ToString()
                        )
                    );
                }
            }
            else
            {
                addFieldValue.Statements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("_schemaObjectBuilder.Add")
                        .Append(fieldTypeMethodName)
                        .Append("FieldValue(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(propertyName)
                        .Append(", value)")
                        .ToString()
                    )
                );
                if (isFieldMandatory)
                {
                    // Note mandatory field has been set
                    MarkPropertyIsSet(addFieldValue, validatorSubFieldName);
                }
            }

            objectBuilderClassBuilder.Members.Add(addFieldValue);
        }

        private void AddListParamSetterMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string fieldFunctionName,
            string propertyName,
            string subFieldName,
            string fieldTypeValue,
            bool isSubfield,
            string parentFieldName,
            bool isParentFieldFlattened,
            bool isFieldMandatory,
            string validatorSubFieldName)
        {
            Type fieldType = PROPERTY_TYPES_LOOKUP[fieldTypeValue];
            string fieldTypeMethodName = PROPERTY_TYPES_METHOD_LOOKUP[fieldTypeValue];

            CodeParameterDeclarationExpression listParamFieldName = new(new CodeTypeReference("List<" + fieldType + ">"), "values");

            CodeMemberMethod setListFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setListFieldValue.Parameters.Add(listParamFieldName);

            if (isSubfield)
            {
                if (isParentFieldFlattened)
                {
                    setListFieldValue.Statements.Add(
                        new CodeSnippetExpression(
                            new StringBuilder("_schemaObjectBuilder.Set")
                            .Append(fieldTypeMethodName)
                            .Append("FieldValue(")
                            .Append(SchemaGeneratorHelper.CLASS_NAME)
                            .Append(".")
                            .Append(parentFieldName)
                            .Append(".")
                            .Append(propertyName)
                            .Append(", values)")
                            .ToString()
                        )
                    );
                    if (isFieldMandatory)
                    {
                        // Note mandatory field has been set
                        MarkPropertyIsSet(setListFieldValue, validatorSubFieldName);
                    }
                }
                else
                {
                    setListFieldValue.Statements.Add(new CodeSnippetExpression(
                        new StringBuilder("this.").Append(subFieldName).Append(" = values").ToString()));
                }
            }
            else
            {
                setListFieldValue.Statements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("_schemaObjectBuilder.Set")
                        .Append(fieldTypeMethodName)
                        .Append("FieldValue(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(propertyName)
                        .Append(", values)")
                        .ToString()
                    )
                );
                if (isFieldMandatory)
                {
                    // Note mandatory field has been set
                    MarkPropertyIsSet(setListFieldValue, validatorSubFieldName);
                }
            }

            objectBuilderClassBuilder.Members.Add(setListFieldValue);
        }

        private void AddArrayParamSetterMethod(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string fieldFunctionName,
            string propertyName,
            string subFieldName,
            string fieldTypeValue,
            bool isSubfield,
            string parentFieldName,
            bool isParentFieldFlattened,
            bool isFieldMandatory,
            string validatorSubFieldName)
        {
            Type fieldType = PROPERTY_TYPES_LOOKUP[fieldTypeValue];
            string fieldTypeMethodName = PROPERTY_TYPES_METHOD_LOOKUP[fieldTypeValue];

            CodeParameterDeclarationExpression arrayParamFieldName = new(fieldType + "[]", "values");
            arrayParamFieldName.CustomAttributes.Add(new CodeAttributeDeclaration(new CodeTypeReference(typeof(ParamArrayAttribute))));

            CodeMemberMethod setArrayFieldValue = new()
            {
                Name = "Set" + fieldFunctionName,
                Attributes = MemberAttributes.Public | MemberAttributes.Final
            };
            setArrayFieldValue.Parameters.Add(arrayParamFieldName);

            if (isSubfield)
            {
                if (isParentFieldFlattened)
                {
                    setArrayFieldValue.Statements.Add(new CodeSnippetStatement(
                        new StringBuilder("_schemaObjectBuilder.Set")
                        .Append(fieldTypeMethodName)
                        .Append("FieldValue(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(parentFieldName)
                        .Append(".")
                        .Append(propertyName)
                        .Append(", values);")
                        .ToString()));
                    if (isFieldMandatory)
                    {
                        // Note mandatory field has been set
                        MarkPropertyIsSet(setArrayFieldValue, validatorSubFieldName);
                    }
                }
                else
                {
                    setArrayFieldValue.Statements.Add(
                        new CodeSnippetStatement(
                            new StringBuilder("this.")
                            .Append(subFieldName)
                            .Append(" = values.ToList();")
                            .ToString()
                        )
                    );
                }
            }
            else
            {
                setArrayFieldValue.Statements.Add(
                    new CodeSnippetStatement(
                        new StringBuilder("_schemaObjectBuilder.Set")
                        .Append(fieldTypeMethodName)
                        .Append("FieldValue(")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(propertyName)
                        .Append(", values);")
                        .ToString()));
                if (isFieldMandatory)
                {
                    // Note mandatory field has been set
                    MarkPropertyIsSet(setArrayFieldValue, validatorSubFieldName);
                }
            }
            objectBuilderClassBuilder.Members.Add(setArrayFieldValue);
        }

        private void CheckFieldsInValidateMethod(
            CodeMemberMethod validateFunctionBuilder,
            string parentFieldName,
            string propertyName,
            string validatorSubFieldName
        )
        {
            CodeConditionStatement ifStatement = new()
            {
                Condition = new CodeSnippetExpression("!" + validatorSubFieldName)
            };
            if (parentFieldName == null)
            {
                ifStatement.TrueStatements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("throw new ArgumentException(\"Mandatory field '")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(propertyName)
                        .Append("' is not set\")")
                        .ToString()
                    )
                );
            }
            else
            {
                ifStatement.TrueStatements.Add(
                    new CodeSnippetExpression(
                        new StringBuilder("throw new ArgumentException(\"Mandatory field '")
                        .Append(SchemaGeneratorHelper.CLASS_NAME)
                        .Append(".")
                        .Append(parentFieldName)
                        .Append(".")
                        .Append(propertyName)
                        .Append("' is not set\")")
                        .ToString()
                    )
                );
            }
            validateFunctionBuilder.Statements.Add(ifStatement);
        }

        private void AddValidateField(
            CodeTypeDeclaration objectBuilderClassBuilder,
            string fieldNameCheck
        )
        {
            CodeMemberField validateField = new()
            {
                Name = fieldNameCheck,
                Attributes = MemberAttributes.Private,
                Type = new CodeTypeReference(typeof(bool))
            };
            objectBuilderClassBuilder.Members.Add(validateField);
        }
    }
}
